"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("./../../modules/logging/Logger");
class EventHandler {
    static addSubscription(subscription) {
        let existingSubscriptionsArray = this.eventNameToSubscriptionMapping[subscription.eventName];
        if (existingSubscriptionsArray) {
            existingSubscriptionsArray.push(subscription);
        }
        else {
            existingSubscriptionsArray = [];
            existingSubscriptionsArray.push(subscription);
        }
        this.eventNameToSubscriptionMapping[subscription.eventName] = existingSubscriptionsArray;
    }
    static removeSubscription(subscription) {
        let receivedEventName = subscription.eventName;
        let receivedCallbackName = subscription.callbackName;
        let existingSubscriptionsArray = this.eventNameToSubscriptionMapping[receivedEventName];
        if (existingSubscriptionsArray) {
            let callbackIndexesToRemove = [];
            let index = 0;
            for (let existingSubscription of existingSubscriptionsArray) {
                if (existingSubscription.callbackName === receivedCallbackName) {
                    callbackIndexesToRemove.push(index);
                    index++;
                }
            }
            while (callbackIndexesToRemove.length) {
                let num = callbackIndexesToRemove.pop();
                if (num) {
                    existingSubscriptionsArray.splice(num, 1);
                }
            }
        }
    }
    static removeAllSubscriptions(eventName) {
        if (this.eventNameToSubscriptionMapping.hasOwnProperty(eventName)) {
            delete this.eventNameToSubscriptionMapping[eventName];
        }
    }
    static sendEvent(eventName, data) {
        let existingSubscriptionsArray = this.eventNameToSubscriptionMapping[eventName];
        if (existingSubscriptionsArray) {
            for (let existingSubscription of existingSubscriptionsArray) {
                existingSubscription.listener(data);
            }
        }
        else {
            Logger_1.Logger.logd('PhonePe', '[Error] No subscribers for eventName = ' + eventName);
        }
    }
}
EventHandler.eventNameToSubscriptionMapping = {};
exports.EventHandler = EventHandler;
