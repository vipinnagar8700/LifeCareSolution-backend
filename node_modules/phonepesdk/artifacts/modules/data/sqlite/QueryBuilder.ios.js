"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class QueryBuilder {
    static read(tableName, columns, selection, groupBy, having, orderBy, limit, offset) {
        let query = '';
        query += 'SELECT' + ' ';
        query += this.commaSeparatedColumnNames(columns) + ' ';
        query += 'FROM' + ' ';
        query += tableName + ' ';
        if (this.isValid(selection)) {
            query += 'WHERE' + ' ';
            query += selection + ' ';
        }
        if (this.isValid(groupBy)) {
            query += 'GROUP BY' + ' ';
            query += groupBy + ' ';
        }
        if (this.isValid(having)) {
            query += 'HAVING' + ' ';
            query += having + ' ';
        }
        if (this.isValid(orderBy)) {
            query += 'ORDER BY' + ' ';
            query += orderBy + ' ';
        }
        if (this.isValid(limit)) {
            query += 'LIMIT' + ' ';
            query += limit + ' ';
        }
        if (this.isValid(offset)) {
            query += 'OFFSET' + ' ';
            query += offset + ' ';
        }
        return query;
    }
    static delete(tableName, selection) {
        let query = 'DELETE' + ' ';
        query += 'FROM' + ' ';
        query += tableName + ' ';
        if (this.isValid(selection)) {
            query += 'WHERE' + ' ';
            query += selection + ' ';
        }
        return query;
    }
    static update(tableName, values, selection) {
        let query = 'UPDATE' + ' ';
        query += tableName + ' ';
        query += 'SET' + ' ';
        for (let property in values) {
            if (values.hasOwnProperty(property)) {
                let value = QueryBuilder.sqliteReadableValue(values[property]);
                if (value !== undefined) {
                    query += property + ' ';
                    query += '=' + ' ';
                    query += value + ', ';
                }
            }
        }
        query = query.slice(0, query.length - 2);
        if (this.isValid(selection)) {
            query += ' WHERE' + ' ';
            query += selection + ' ';
        }
        return query;
    }
    static insertWithOnConflict(tableName, initialValues, conflictAlgorithm) {
        let query = 'INSERT' + ' ';
        let conflictAlgorithmName = this.conflictNameForConflictAlgorithm(conflictAlgorithm);
        if (this.isValid(conflictAlgorithmName)) {
            query += 'OR' + ' ';
            query += conflictAlgorithmName + ' ';
        }
        query += 'INTO' + ' ';
        query += tableName;
        let queryColumnData = new InsertQueryData(initialValues);
        query += queryColumnData.columnNames + ' ';
        query += 'VALUES' + ' ';
        query += queryColumnData.columnValues + ' ';
        return query;
    }
    static commaSeparatedColumnNames(columns) {
        if (!this.isValid(columns)) {
            return '*';
        }
        let result = '';
        if (columns) {
            columns.forEach((column) => {
                result += (column + ',');
            });
        }
        result = result.slice(0, result.length - 1);
        return result;
    }
    static isValid(value) {
        if (value === undefined) {
            return false;
        }
        return true;
    }
    static conflictNameForConflictAlgorithm(algo) {
        if (algo === 1) {
            return 'ROLLBACK';
        }
        if (algo === 2) {
            return 'ABORT';
        }
        if (algo === 3) {
            return 'FAIL';
        }
        if (algo === 4) {
            return 'IGNORE';
        }
        if (algo === 5) {
            return 'REPLACE';
        }
        return undefined;
    }
    static sqliteReadableValue(val) {
        if (!this.isValid(val)) {
            return undefined;
        }
        if (typeof val === 'boolean') {
            return (val === true ? 1 : 0);
        }
        else if (typeof val === 'number') {
            return val;
        }
        else if (typeof val === 'string') {
            return '\'' + val.replace(/\'/g, '\'\'') + '\'';
        }
        else {
            return JSON.stringify(val);
        }
    }
}
exports.QueryBuilder = QueryBuilder;
class InsertQueryData {
    constructor(initialValues) {
        let computedColumnNames = '(';
        let computedColumnValues = '(';
        for (let property in initialValues) {
            if (initialValues.hasOwnProperty(property)) {
                let val = QueryBuilder.sqliteReadableValue(initialValues[property]);
                if (val !== undefined) {
                    computedColumnNames += property + ',';
                    computedColumnValues += val + ',';
                }
            }
        }
        computedColumnNames = computedColumnNames.slice(0, computedColumnNames.length - 1);
        computedColumnValues = computedColumnValues.slice(0, computedColumnValues.length - 1);
        computedColumnNames += ')';
        computedColumnValues += ')';
        this.columnNames = computedColumnNames;
        this.columnValues = computedColumnValues;
    }
}
