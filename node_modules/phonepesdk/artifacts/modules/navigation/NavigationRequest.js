"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NavigationScreenType;
(function (NavigationScreenType) {
    NavigationScreenType["WebView"] = "WebView";
    NavigationScreenType["ReactView"] = "ReactView";
    NavigationScreenType["PaymentsView"] = "PaymentView";
    NavigationScreenType["GenericPaymentsView"] = "GenericPaymentsView";
    NavigationScreenType["AppScreen"] = "AppScreen";
    NavigationScreenType["ContactPicker"] = "ContactPicker";
    NavigationScreenType["TransactionDetail"] = "TransactionDetail";
    NavigationScreenType["Profile"] = "Profile";
    NavigationScreenType["HelpPage"] = "HelpPage";
    NavigationScreenType["MandateSetup"] = "MandateSetup";
    NavigationScreenType["AddToWallet"] = "AddToWallet";
    NavigationScreenType["MicroApp"] = "MicroApp";
    NavigationScreenType["PWAWebView"] = "PWAWebView";
})(NavigationScreenType = exports.NavigationScreenType || (exports.NavigationScreenType = {}));
class BaseNavigationRequest {
    constructor(screenType, title, animated, showModally) {
        this.screenType = screenType;
        this.title = title;
        this.animated = animated;
        this.showModally = showModally;
        this.isNewTask = false;
    }
}
exports.BaseNavigationRequest = BaseNavigationRequest;
class ReactViewNavigationRequest extends BaseNavigationRequest {
    constructor(bundleName, componentName, showToolbar, title, animated, showModally, initialProperties, category, merchantId, merchantName, tAndCUrl, appId, appUniqueId) {
        super(NavigationScreenType.ReactView, title, animated, showModally);
        this.appId = appId;
        this.bundleName = bundleName;
        this.componentName = componentName;
        this.shouldShowToolbar = showToolbar;
        this.toolBarText = title;
        this.animated = animated;
        this.showModally = showModally;
        this.initialProperties = initialProperties;
        this.category = category;
        this.merchantId = merchantId;
        this.merchantName = merchantName;
        this.tAndCUrl = tAndCUrl;
        this.appUniqueId = appUniqueId;
    }
}
exports.ReactViewNavigationRequest = ReactViewNavigationRequest;
class WebViewNavigationRequest extends BaseNavigationRequest {
    constructor(url, title, shouldShowToolBar, shouldShowBackButton, screenName, shouldAllowWebViewBack, shouldShowProgressWhileLoading, animated, showModally) {
        super(NavigationScreenType.WebView, title, animated, showModally);
        this.url = url;
        this.title = title;
        this.shouldShowToolBar = shouldShowToolBar;
        this.shouldShowBackButton = shouldShowBackButton;
        this.screenName = screenName;
        this.shouldAllowWebViewBack = shouldAllowWebViewBack;
        this.shouldShowProgressWhileLoading = shouldShowProgressWhileLoading;
    }
}
exports.WebViewNavigationRequest = WebViewNavigationRequest;
class PWAWebViewNavigationRequest extends BaseNavigationRequest {
    constructor(merchantId, deepLinkUrl, appId, appUniqueId) {
        super(NavigationScreenType.PWAWebView, '', true, true);
        this.merchantId = merchantId;
        this.deepLinkUrl = deepLinkUrl;
        this.appId = appId;
        this.appUniqueId = appUniqueId;
    }
}
exports.PWAWebViewNavigationRequest = PWAWebViewNavigationRequest;
class AppScreenNavigationRequest extends BaseNavigationRequest {
    constructor(screenName, url, params, title, animated, showModally) {
        super(NavigationScreenType.AppScreen, title, animated, showModally);
        this.screenName = screenName;
        this.url = url;
        this.params = params;
    }
}
exports.AppScreenNavigationRequest = AppScreenNavigationRequest;
class PaymentMetaData {
    constructor(details) {
        this.details = details;
    }
}
exports.PaymentMetaData = PaymentMetaData;
class PaymentNavigationRequest extends BaseNavigationRequest {
    constructor(_screenName, title, animated, showModally, mode, payRequest, uiConfig, transactionType, metaData, originInfo) {
        super(NavigationScreenType.PaymentsView, title, animated, showModally);
        this.mode = mode;
        this.microPayRequest = payRequest;
        this.internalPaymentUiConfig = uiConfig;
        this.transactionType = transactionType;
        this.metaData = metaData;
        this.originInfo = originInfo;
    }
}
exports.PaymentNavigationRequest = PaymentNavigationRequest;
class GenericPaymentNavigationRequest extends BaseNavigationRequest {
    constructor(title, animated, showModally, reservationId, fallbackUrl) {
        super(NavigationScreenType.GenericPaymentsView, title, animated, showModally);
        this.reservationId = reservationId;
        if (fallbackUrl) {
            this.fallbackUrl = fallbackUrl;
        }
    }
}
exports.GenericPaymentNavigationRequest = GenericPaymentNavigationRequest;
class MandateSetupNavigationRequest extends BaseNavigationRequest {
    constructor(mandateContext, mandateUiConfig, title, animated, showModally, mandateType) {
        super(NavigationScreenType.MandateSetup, title, animated, showModally);
        this.mandateContext = mandateContext;
        this.mandateUiConfig = mandateUiConfig;
        this.mandateType = mandateType || 'MERCHANT';
    }
}
exports.MandateSetupNavigationRequest = MandateSetupNavigationRequest;
class AddToWalletNavigationRequest extends BaseNavigationRequest {
    constructor(addToWalletUiContext, title, animated, showModally) {
        super(NavigationScreenType.AddToWallet, title, animated, showModally);
        this.addToWalletUiContext = addToWalletUiContext;
    }
}
exports.AddToWalletNavigationRequest = AddToWalletNavigationRequest;
class TransactionDetailsNavigationRequest extends BaseNavigationRequest {
    constructor(_screenName, title, animated, showModally, transactionId, transactionType, originInfo) {
        super(NavigationScreenType.TransactionDetail, title, animated, showModally);
        this.transactionId = transactionId;
        this.transactionType = transactionType;
        this.info = originInfo;
    }
}
exports.TransactionDetailsNavigationRequest = TransactionDetailsNavigationRequest;
class ContactNavigationRequest extends BaseNavigationRequest {
    constructor(_screenName, title, animated, showModally, contactPickerMode, contactPickerType, initialContacts, transactionType, isVpaEnable, isSelfEnable, phoneContact, vpaContact, accountContact, _originInfo) {
        super(NavigationScreenType.ContactPicker, title, animated, showModally);
        this.contactPickerMode = contactPickerMode;
        this.contactPickerType = contactPickerType;
        this.initialContacts = initialContacts;
        this.transactionType = transactionType;
        this.isVpaEnable = isVpaEnable;
        this.isSelfEnable = isSelfEnable;
        this.phoneContact = phoneContact;
        this.vpaContact = vpaContact;
        this.accountContact = accountContact;
    }
}
exports.ContactNavigationRequest = ContactNavigationRequest;
class ProfileNavRequest extends BaseNavigationRequest {
    constructor(screenType, title, animated, showModally) {
        super(screenType, title, animated, showModally);
    }
}
exports.ProfileNavRequest = ProfileNavRequest;
class HelpPageNavRequest extends BaseNavigationRequest {
    constructor(transactionId, title, animated, showModally, shouldShowToolBar, shouldAllowWebViewBack, screen, url, freshBotIntentData) {
        super(NavigationScreenType.HelpPage, title, animated, showModally);
        this.transactionId = transactionId;
        this.screen = screen;
        this.url = url;
        this.shouldShowToolBar = shouldShowToolBar;
        this.shouldAllowWebViewBack = shouldAllowWebViewBack;
        this.freshBotIntentData = freshBotIntentData;
    }
}
exports.HelpPageNavRequest = HelpPageNavRequest;
class FreshBotIntentData {
    constructor(freshBotScreens) {
        this.freshBotScreens = freshBotScreens;
        this.queryParams = {};
    }
}
exports.FreshBotIntentData = FreshBotIntentData;
class CloseAppNavRequest {
    constructor(appIdentifier) {
        this.appIdentifier = appIdentifier;
    }
}
exports.CloseAppNavRequest = CloseAppNavRequest;
class MicroAppNavigationRequest extends BaseNavigationRequest {
    constructor(appId, appUniqueId, initialProperties, title, animated, showModally) {
        super(NavigationScreenType.MicroApp, title, animated, showModally);
        this.appId = appId;
        this.appUniqueId = appUniqueId;
        this.initialProperties = initialProperties;
    }
}
exports.MicroAppNavigationRequest = MicroAppNavigationRequest;
