"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PhonePeUtils_1 = require("./../../utils/PhonePeUtils");
const Logger_1 = require("./../../modules/logging/Logger");
const PhonePeSDKWebConstants_1 = require("./../../constants/PhonePeSDKWebConstants");
const MethodVersioningHandler_1 = require("../../modules/versioning/MethodVersioningHandler");
class MessagingHandler {
    static callback(callbackName, resolved, data, error) {
        Logger_1.Logger.logd('PhonePe', 'phonepeCallback called! with callbackName = ' + callbackName);
        let promise = MessagingHandler.promiseMapping[callbackName];
        if (promise) {
            if (resolved === '1') {
                promise[PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.General.resolve](data);
            }
            else {
                promise[PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.General.reject](error);
            }
            delete MessagingHandler.promiseMapping[callbackName];
        }
    }
    static callNative(methodName, androidBridgeName, obj) {
        if (!MethodVersioningHandler_1.MethodVersioningHandler.isMethodSupported(methodName)) {
            Logger_1.Logger.logd('PhonePe', 'Sorry! This method is not supported with PhonePe app\'s version');
            return;
        }
        Logger_1.Logger.logd('PhonePe', 'Trying to call methodName = ' + methodName);
        let localWebkit = window.webkit;
        if (PhonePeUtils_1.PhonePeUtils.isValidMethodOniOS(methodName)) {
            localWebkit.messageHandlers[methodName].postMessage(obj);
        }
        else {
            let androidBridge = window[androidBridgeName];
            androidBridge[methodName](JSON.stringify(obj));
        }
    }
    static storePromiseAndCallNative(methodName, androidBridgeName, obj) {
        let promise = new Promise((resolve, reject) => {
            let uuid = PhonePeUtils_1.PhonePeUtils.createuuid();
            obj[PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.General.callbackId] = uuid;
            this.callNative(methodName, androidBridgeName, obj);
            this.promiseMapping[uuid] = {
                'resolve': resolve,
                'reject': reject
            };
        });
        return promise;
    }
}
MessagingHandler.promiseMapping = {};
exports.MessagingHandler = MessagingHandler;
