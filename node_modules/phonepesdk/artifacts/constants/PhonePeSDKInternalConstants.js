"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var InternalConstants;
(function (InternalConstants) {
    InternalConstants.sdkVersion = '0.1';
    InternalConstants.PhonePeSDKRNMajorVersion = 0;
    InternalConstants.PhonePeSDKRNMinorVersion = 53;
    InternalConstants.data_preferences = 'database_versions';
    InternalConstants.PhonePeSDKVersion = 4;
    let General;
    (function (General) {
        General.confirmationScreenDuration = 400;
        General.discoveryContextMode = 'PEER_TO_MERCHANT';
        General.paymentScreenName = 'PAY';
        General.v1 = 'v1';
        General.v2 = 'v2';
    })(General = InternalConstants.General || (InternalConstants.General = {}));
    let ErrorCode;
    (function (ErrorCode) {
        ErrorCode.invalidParams = 'PARAMS_INVALID_OR_INSUFFICIENT';
    })(ErrorCode = InternalConstants.ErrorCode || (InternalConstants.ErrorCode = {}));
    let ActivityID;
    (function (ActivityID) {
        ActivityID.payments = 103;
        ActivityID.transactionDetails = 105;
    })(ActivityID = InternalConstants.ActivityID || (InternalConstants.ActivityID = {}));
    let PermissionsBridge;
    (function (PermissionsBridge) {
        PermissionsBridge.name = 'PermissionsBridge';
        PermissionsBridge.seekPermission = 'seekPermission';
        PermissionsBridge.openSettingsPage = 'openSettingsPageForPermission';
        PermissionsBridge.androidPrefix = 'android.permission.';
        PermissionsBridge.locationPermissionName = 'ACCESS_FINE_LOCATION';
        PermissionsBridge.kPermission = 'permission';
        PermissionsBridge.kPermissionStatus = 'permissionGranted';
        PermissionsBridge.kShowAgain = 'willShowPermissionAlertAgain';
    })(PermissionsBridge = InternalConstants.PermissionsBridge || (InternalConstants.PermissionsBridge = {}));
    let AnalyticsBridge;
    (function (AnalyticsBridge) {
        AnalyticsBridge.bridgeName = 'AnalyticsBridge';
        AnalyticsBridge.methodName = 'logMerchantEvent';
        AnalyticsBridge.kName = 'name';
        AnalyticsBridge.kMetadata = 'metadata';
        AnalyticsBridge.kGroupingKey = 'groupingKey';
    })(AnalyticsBridge = InternalConstants.AnalyticsBridge || (InternalConstants.AnalyticsBridge = {}));
    let AuthBridge;
    (function (AuthBridge) {
        AuthBridge.bridgeName = 'AuthBridge';
        AuthBridge.fetchGrantToken = 'fetchGrantToken';
        AuthBridge.fetchAuthToken = 'fetchAuthToken';
        AuthBridge.fetchPermissionGrantToken = 'resourceGrant';
        AuthBridge.resourceGrant = 'resourceGrant';
    })(AuthBridge = InternalConstants.AuthBridge || (InternalConstants.AuthBridge = {}));
    let NavigationBridge;
    (function (NavigationBridge) {
        NavigationBridge.bridgeName = 'NavigationBridge';
        NavigationBridge.navigateToMap = 'navigateToMap';
        NavigationBridge.navigateToSwitchApp = 'navigateToSwitchApp';
    })(NavigationBridge = InternalConstants.NavigationBridge || (InternalConstants.NavigationBridge = {}));
    let OrientationBridge;
    (function (OrientationBridge) {
        OrientationBridge.bridgeName = 'OrientationBridge';
        OrientationBridge.changeOrientation = 'changeOrientation';
        OrientationBridge.requestFullScreenMode = 'requestFullScreenMode';
        OrientationBridge.requestExitFullScreenMode = 'requestExitFullScreenMode';
    })(OrientationBridge = InternalConstants.OrientationBridge || (InternalConstants.OrientationBridge = {}));
    let OrderActionBridge;
    (function (OrderActionBridge) {
        OrderActionBridge.bridgeName = 'OrderActionBridge';
        OrderActionBridge.reserveOrder = 'reserveOrder';
        OrderActionBridge.fetchOrderRequestToken = 'fetchOrderRequestToken';
        OrderActionBridge.openPaymentsPageForReservedOrder = 'openPaymentsPageForReservedOrder';
    })(OrderActionBridge = InternalConstants.OrderActionBridge || (InternalConstants.OrderActionBridge = {}));
    let FilePickerBridge;
    (function (FilePickerBridge) {
        FilePickerBridge.bridgeName = 'FilePickerBridge';
        FilePickerBridge.selectFile = 'selectFile';
        FilePickerBridge.readFile = 'readFile';
    })(FilePickerBridge = InternalConstants.FilePickerBridge || (InternalConstants.FilePickerBridge = {}));
    let CameraBridge;
    (function (CameraBridge) {
        CameraBridge.bridgeName = 'CameraBridge';
        CameraBridge.scanQRCode = 'scanQRCode';
        CameraBridge.startCamera = 'startCamera';
    })(CameraBridge = InternalConstants.CameraBridge || (InternalConstants.CameraBridge = {}));
    let BleManager;
    (function (BleManager) {
        BleManager.bridgeName = 'BleManager';
        BleManager.read = 'read';
        BleManager.readRSSI = 'readRSSI';
        BleManager.refreshCache = 'refreshCache';
        BleManager.retrieveServices = 'retrieveServices';
        BleManager.write = 'write';
        BleManager.writeWithoutResponse = 'writeWithoutResponse';
        BleManager.connect = 'connect';
        BleManager.createBond = 'createBond';
        BleManager.removeBond = 'removeBond';
        BleManager.disconnect = 'disconnect';
        BleManager.startNotification = 'startNotification';
        BleManager.stopNotification = 'stopNotification';
        BleManager.checkState = 'checkState';
        BleManager.start = 'start';
        BleManager.scan = 'scan';
        BleManager.stopScan = 'stopScan';
        BleManager.enableBluetooth = 'enableBluetooth';
        BleManager.getConnectedPeripherals = 'getConnectedPeripherals';
        BleManager.getBondedPeripherals = 'getBondedPeripherals';
        BleManager.getDiscoveredPeripherals = 'getDiscoveredPeripherals';
        BleManager.removePeripheral = 'removePeripheral';
        BleManager.isPeripheralConnected = 'isPeripheralConnected';
        BleManager.requestConnectionPriority = 'requestConnectionPriority';
        BleManager.requestMTU = 'requestMTU';
        BleManager.registerBluetoothOperationSuccessCallback = 'registerBluetoothOperationSuccessCallback';
    })(BleManager = InternalConstants.BleManager || (InternalConstants.BleManager = {}));
    let VideoPlayerBridge;
    (function (VideoPlayerBridge) {
        VideoPlayerBridge.bridgeName = 'VideoPlayerBridge';
        VideoPlayerBridge.startVideoPlayer = 'startVideoPlayer';
    })(VideoPlayerBridge = InternalConstants.VideoPlayerBridge || (InternalConstants.VideoPlayerBridge = {}));
    let Feature;
    (function (Feature) {
        Feature.videoCall = 'videoCall';
    })(Feature = InternalConstants.Feature || (InternalConstants.Feature = {}));
})(InternalConstants = exports.InternalConstants || (exports.InternalConstants = {}));
