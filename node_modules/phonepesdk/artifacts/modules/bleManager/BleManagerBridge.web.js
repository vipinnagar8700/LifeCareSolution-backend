"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MessagingHandler_1 = require("../../core/web/MessagingHandler");
const PhonePeSDKInternalConstants_1 = require("../../constants/PhonePeSDKInternalConstants");
const Const = PhonePeSDKInternalConstants_1.InternalConstants.BleManager;
const PhonePeWebSubscription_1 = require("./../../subscription/PhonePeWebSubscription");
const EventHandler_1 = require("../../core/web/EventHandler");
class WebPPBleManager {
    read(peripheralId, serviceUUID, characteristicUUID) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.read, Const.bridgeName, { peripheralId, serviceUUID, characteristicUUID })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    readRSSI(peripheralId) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.readRSSI, Const.bridgeName, { peripheralId })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    refreshCache(peripheralId) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.refreshCache, Const.bridgeName, { peripheralId })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    retrieveServices(peripheralId, services) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.retrieveServices, Const.bridgeName, { peripheralId, services })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    write(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.write, Const.bridgeName, { peripheralId, serviceUUID, characteristicUUID, data, maxByteSize })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    writeWithoutResponse(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize, queueSleepTime) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.writeWithoutResponse, Const.bridgeName, { peripheralId, serviceUUID, characteristicUUID, data, maxByteSize, queueSleepTime })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    connect(peripheralId) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.connect, Const.bridgeName, { peripheralId })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    createBond(peripheralId) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.createBond, Const.bridgeName, { peripheralId })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    registerBluetoothOperationSuccessCallback(callbackName, eventName, callback) {
        let subscription = new PhonePeWebSubscription_1.PhonePeWebSubscription(callbackName, eventName, callback);
        EventHandler_1.EventHandler.addSubscription(subscription);
        return subscription;
    }
    removeBond(peripheralId) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.removeBond, Const.bridgeName, { peripheralId })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    disconnect(peripheralId) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.disconnect, Const.bridgeName, { peripheralId })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    startNotification(peripheralId, serviceUUID, characteristicUUID) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.startNotification, Const.bridgeName, { peripheralId, serviceUUID, characteristicUUID })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    stopNotification(peripheralId, serviceUUID, characteristicUUID) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.stopNotification, Const.bridgeName, { peripheralId, serviceUUID, characteristicUUID })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    checkState() {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.checkState, Const.bridgeName, {})
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    start(options) {
        if (!options) {
            options = {};
        }
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.start, Const.bridgeName, { options })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    scan(serviceUUIDs, seconds, allowDuplicates, scanningOptions) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.scan, Const.bridgeName, { serviceUUIDs, seconds, allowDuplicates, scanningOptions })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    stopScan() {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.stopScan, Const.bridgeName, {})
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    enableBluetooth() {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.enableBluetooth, Const.bridgeName, {})
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    getConnectedPeripherals(serviceUUIDs) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.getConnectedPeripherals, Const.bridgeName, { serviceUUIDs })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    getBondedPeripherals() {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.getBondedPeripherals, Const.bridgeName, {})
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    getDiscoveredPeripherals() {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.getDiscoveredPeripherals, Const.bridgeName, {})
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    removePeripheral(peripheralId) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.removePeripheral, Const.bridgeName, { peripheralId })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    isPeripheralConnected(peripheralId, serviceUUIDs) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.isPeripheralConnected, Const.bridgeName, { peripheralId, serviceUUIDs })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestConnectionPriority(peripheralId, connectionPriority) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.requestConnectionPriority, Const.bridgeName, { peripheralId, connectionPriority })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestMTU(peripheralId, mtu) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.requestMTU, Const.bridgeName, { peripheralId, mtu })
                .then((res) => {
                resolve(JSON.parse(res));
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
}
exports.WebPPBleManager = WebPPBleManager;
