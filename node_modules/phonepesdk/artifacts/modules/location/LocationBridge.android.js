"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PhonePeReactSubscription_1 = require("../../subscription/PhonePeReactSubscription");
const react_native_1 = require("react-native");
const PhonePeSDKWebConstants_1 = require("./../../constants/PhonePeSDKWebConstants");
const PhonePeSDKExternalConstants_1 = require("../../constants/PhonePeSDKExternalConstants");
const AnalyticsHelper_1 = require("../../utils/AnalyticsHelper");
var Species = PhonePeSDKExternalConstants_1.ExternalConstants.Species;
class AndroidLocationBridge {
    constructor(bridge) {
        this.locationBridge = bridge;
        this.logMerchantEvent = AnalyticsHelper_1.AnalyticsBridgeUtil.getEventLoggerForBridge(Species.native, react_native_1.Platform.OS, 'LOCATION_BRIDGE_EVENT');
        this.eventEmitter = new react_native_1.NativeEventEmitter(bridge);
    }
    getAddress(latitude, longitude) {
        return new Promise((resolve, reject) => {
            const methodName = 'getAddress';
            this.logMerchantEvent(methodName, 'START');
            this.locationBridge.getAddress(latitude, longitude)
                .then((res) => {
                this.logMerchantEvent(methodName, 'SUCCESS');
                resolve(res);
            })
                .catch((err) => {
                this.logMerchantEvent(methodName, 'FAILED', JSON.stringify(err));
                reject(err);
            });
        });
    }
    startUpdatingLocation() {
        this.locationBridge.startLocationUpdates();
    }
    stopUpdatingLocation() {
        this.locationBridge.stopLocationUpdates();
    }
    getCurrentLocation(forceNewLocation = false) {
        return new Promise((resolve, reject) => {
            const methodName = 'getCurrentLocation';
            this.logMerchantEvent(methodName, 'START');
            this.locationBridge.getFusedLocation(forceNewLocation)
                .then((res) => {
                this.logMerchantEvent(methodName, 'SUCCESS');
                resolve(res);
            })
                .catch((err) => {
                this.logMerchantEvent(methodName, 'FAILED', JSON.stringify(err));
                reject(err);
            });
        });
    }
    onLocationUpdateSuccess(callbackName, callback) {
        let eventName = PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.Location.locationSuccessEventKey;
        let emitterSubscription = this.eventEmitter.addListener(eventName, callback);
        let phonepeSubscription = new PhonePeReactSubscription_1.PhonePeReactSubscription(callbackName, eventName, callback, emitterSubscription);
        return phonepeSubscription;
    }
    onLocationUpdateFailure(callbackName, callback) {
        let eventName = PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.Location.locationFailureEventKey;
        let emitterSubscription = this.eventEmitter.addListener(eventName, callback);
        let phonepeSubscription = new PhonePeReactSubscription_1.PhonePeReactSubscription(callbackName, eventName, callback, emitterSubscription);
        return phonepeSubscription;
    }
    isLocationTurnedOn() {
        return new Promise((resolve, reject) => {
            const methodName = 'isLocationTurnedOn';
            this.logMerchantEvent(methodName, 'START');
            this.locationBridge.isLocationTurnedOn()
                .then((res) => {
                this.logMerchantEvent(methodName, 'SUCCESS');
                resolve(res);
            })
                .catch((err) => {
                this.logMerchantEvent(methodName, 'FAILED', JSON.stringify(err));
                reject(err);
            });
        });
    }
    turnOnLocation() {
        return new Promise((resolve, reject) => {
            const methodName = 'turnOnLocation';
            this.logMerchantEvent(methodName, 'START');
            this.locationBridge.turnOnLocation()
                .then((res) => {
                this.logMerchantEvent(methodName, 'SUCCESS');
                resolve(res);
            })
                .catch((err) => {
                this.logMerchantEvent(methodName, 'FAILED', JSON.stringify(err));
                reject(err);
            });
        });
    }
    setLocationPriority(priority) {
        return this.locationBridge.setLocationPriority(priority);
    }
}
exports.AndroidLocationBridge = AndroidLocationBridge;
