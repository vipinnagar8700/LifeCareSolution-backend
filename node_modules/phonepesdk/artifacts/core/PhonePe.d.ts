import { PhonePeEmitterSubscription } from './../subscription/PhonePeEmitterSubscription';
import { MessagingHandler as MHImported } from './web/MessagingHandler';
import { EventHandler as EHImported } from './web/EventHandler';
import { ExternalConstants } from '../constants/PhonePeSDKExternalConstants';
import { ExternalPaymentModels } from './../modules/payment/ExternalPaymentModels';
import Permission = ExternalConstants.Permission;
import PPTransactionState = ExternalPaymentModels.TransactionState;
import PPActionButtonProp = ExternalPaymentModels.ActionButtonProp;
import OrientationMode = ExternalConstants.OrientationMode;
import BlueToothListenerEvents = ExternalConstants.BlueToothListenerEvents;
export declare const MessagingHandler: typeof MHImported;
export declare const EventHandler: typeof EHImported;
export declare const Constants: typeof ExternalConstants;
export declare const PaymentModels: typeof ExternalPaymentModels;
export declare class PhonePe {
    static loggingEnabled: boolean;
    private preferencesModule;
    private navigationModule;
    private cameraBridge;
    private locationModule;
    private permissionsBridge;
    private analyticsBridge;
    private authBridge;
    private deviceInfoBridge;
    private bleManagerBridge;
    private orderActionBridge;
    private filePickerBridge;
    private orientationBridge;
    private videoPlayerBridge;
    private species;
    private constructor();
    static build(species: string, operatingSystem?: string): Promise<PhonePe>;
    static getOperatingSystem(species: string): string;
    getItem(preferenceName: string, key: string, defaultValue?: string): Promise<string>;
    setItem(preferenceName: string, key: string, value: string): Promise<void>;
    removeItem(preferenceName: string, key: string): Promise<void>;
    startUpdatingLocation(): void;
    stopUpdatingLocation(): void;
    getCurrentLocation(): Promise<any>;
    registerLocationUpdateSuccessCallback(callbackName: string, callback: (response: any) => void): Promise<PhonePeEmitterSubscription>;
    registerLocationUpdateFailureCallback(callbackName: string, callback: (response: any) => void): Promise<PhonePeEmitterSubscription>;
    openPaymentsPage(merchantName: string, context: {
        [key: string]: any;
    }, fallbackURL?: string, imageURL?: string, orderedMetaData?: [{
        [key: string]: string;
    }], confirmationActionButtonProperties?: Partial<{
        [key in PPTransactionState]: PPActionButtonProp;
    }>): Promise<any>;
    openTransactionDetailsPage(transactionId: string): Promise<any>;
    seekPermission(listOfPermissions: Permission[]): Promise<any>;
    openSettingsPageForPermission(): Promise<void>;
    scanQRCode(showGallery: boolean, validatorRegex?: string): Promise<string>;
    startCamera(): Promise<string>;
    loadFont(name: string, base64FontString: string, type: string): Promise<string>;
    logMerchantEvent(name: string, metadata: {
        [key: string]: string;
    } | undefined): Promise<void>;
    fetchGrantToken(): Promise<any>;
    fetchPermissionGrantToken(permissions: Array<Permission>): Promise<any>;
    fetchAuthToken(): Promise<any>;
    createServiceRequestToken(): Promise<any>;
    getDeviceInfo(): Promise<any>;
    bluetoothRead(peripheralId: string, serviceUUID: string, characteristicUUID: string): Promise<any>;
    bluetoothReadRSSI(peripheralId: string): Promise<any>;
    registerBluetoothOperationSuccessCallback(callbackName: string, eventName: BlueToothListenerEvents, callback: (response: any) => void): Promise<PhonePeEmitterSubscription>;
    bluetoothRefreshCache(peripheralId: string): Promise<any>;
    bluetoothRetrieveServices(peripheralId: string, services: string): Promise<any>;
    bluetoothWrite(peripheralId: string, serviceUUID: string, characteristicUUID: string, data: any, maxByteSize?: number): Promise<any>;
    bluetoothWriteWithoutResponse(peripheralId: string, serviceUUID: string, characteristicUUID: string, data: any, maxByteSize?: number, queueSleepTime?: number): Promise<any>;
    bluetoothConnect(peripheralId: string): Promise<any>;
    bluetoothCreateBond(peripheralId: string): Promise<any>;
    bluetoothRemoveBond(peripheralId: string): Promise<any>;
    bluetoothDisconnect(peripheralId: string): Promise<any>;
    bluetoothStartNotification(peripheralId: string, serviceUUID: string, characteristicUUID: string): Promise<any>;
    bluetoothStopNotification(peripheralId: string, serviceUUID: string, characteristicUUID: string): Promise<any>;
    bluetoothCheckState(): void;
    bluetoothStart(options: any): Promise<any>;
    bluetoothScan(serviceUUIDs: string[], seconds: number, allowDuplicates?: boolean, scanningOptions?: any): Promise<any>;
    bluetoothStopScan(): Promise<any>;
    bluetoothEnableBluetooth(): Promise<any>;
    bluetoothGetConnectedPeripherals(serviceUUIDs: string[]): Promise<any>;
    bluetoothGetBondedPeripherals(): Promise<any>;
    bluetoothGetDiscoveredPeripherals(): Promise<any>;
    bluetoothRemovePeripheral(peripheralId: string): Promise<any>;
    bluetoothIsPeripheralConnected(peripheralId: string, serviceUUIDs: string[]): Promise<any>;
    bluetoothRequestConnectionPriority(peripheralId: string, connectionPriority: string): Promise<any>;
    bluetoothRequestMTU(peripheralId: string, mtu: string): Promise<any>;
    reserveOrder(response: string, providerId: string): Promise<any>;
    proceedToPay(reservationId: string, fallbackURL?: string): Promise<any>;
    openPaymentsPageForReservedOrder(merchantName: string, response: string, fallbackURL?: string, imageURL?: string, orderedMetaData?: [{
        [key: string]: string;
    }], confirmationActionButtonProperties?: Partial<{
        [key in PPTransactionState]: PPActionButtonProp;
    }>): Promise<any>;
    makeCommonPaymentsPageCall(version: string, merchantName: string, context: {
        [key: string]: any;
    }, fallbackURL?: string, imageURL?: string, orderedMetaData?: [{
        [key: string]: string;
    }], confirmationActionButtonProperties?: Partial<{
        [key in PPTransactionState]: PPActionButtonProp;
    }>): Promise<any>;
    selectFile(mimeType: string, allowMultiple: boolean): Promise<any>;
    readFile(uri: string, offset: number, length: number): Promise<any>;
    changeOrientation(orientationType: OrientationMode): Promise<any>;
    requestFullScreenMode(): void;
    requestExitFullScreenMode(): void;
    closeApp(): void;
    openMicroApp(appUniqueId: string): Promise<any>;
    navigateToMap(latitude: number, longitude: number): Promise<any>;
    isVideoCallingEnabled(): boolean;
    startVideoPlayer(configuration: string): Promise<any>;
    isMethodSupported(methodName: string): boolean;
}
