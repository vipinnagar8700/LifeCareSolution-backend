"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AnalyticsHelper_1 = require("../../../utils/AnalyticsHelper");
const PhonePeSDKExternalConstants_1 = require("../../../constants/PhonePeSDKExternalConstants");
var Species = PhonePeSDKExternalConstants_1.ExternalConstants.Species;
const react_native_1 = require("react-native");
class AndroidNativePreferenceBridge {
    constructor(preferenceBridge) {
        this.preferenceBridge = preferenceBridge;
        this.logMerchantEvent = AnalyticsHelper_1.AnalyticsBridgeUtil.getEventLoggerForBridge(Species.native, react_native_1.Platform.OS, 'PREFERENCE_BRIDGE_EVENT');
    }
    getString(preferenceName, key, defaultValue) {
        return new Promise((resolve, reject) => {
            const methodName = 'getString';
            this.logMerchantEvent(methodName, 'START');
            this.preferenceBridge.getString(preferenceName, key, defaultValue)
                .then((res) => {
                this.logMerchantEvent(methodName, 'SUCCESS');
                resolve(res);
            })
                .catch((err) => {
                this.logMerchantEvent(methodName, 'FAILED', JSON.stringify(err));
                reject(err);
            });
        });
    }
    getNumber(preferenceName, key, defaultValue) {
        return new Promise((resolve, reject) => {
            const methodName = 'getNumber';
            this.logMerchantEvent(methodName, 'START');
            this.preferenceBridge.getInt(preferenceName, key, defaultValue)
                .then((res) => {
                this.logMerchantEvent(methodName, 'SUCCESS');
                resolve(res);
            })
                .catch((err) => {
                this.logMerchantEvent(methodName, 'FAILED', JSON.stringify(err));
                reject(err);
            });
        });
    }
    getDecryptedUserId() {
        return new Promise((resolve, reject) => {
            const methodName = 'getDecryptedUserId';
            this.preferenceBridge.getDecryptedUserId()
                .then((res) => {
                this.logMerchantEvent(methodName, 'SUCCESS');
                resolve(res);
            })
                .catch((err) => {
                this.logMerchantEvent(methodName, 'FAILED', JSON.stringify(err));
                reject(err);
            });
        });
    }
    saveNumber(preferenceName, key, value) {
        this.preferenceBridge.saveInt(preferenceName, key, value);
    }
    saveString(preferenceName, key, value) {
        this.preferenceBridge.saveString(preferenceName, key, value);
    }
    removeItem(preferenceName, key) {
        this.preferenceBridge.removeKey(preferenceName, key);
    }
}
exports.AndroidNativePreferenceBridge = AndroidNativePreferenceBridge;
