"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const models_1 = require("./models");
var Constant = models_1.ExternalPaymentsNamespace.Constant;
var PaymentOptionsContext = models_1.ExternalPaymentsNamespace.PaymentOptionsContext;
var PaymentOptionsContextMetadata = models_1.ExternalPaymentsNamespace.PaymentOptionsContextMetadata;
var MicroPayRequest = models_1.ExternalPaymentsNamespace.MicroPayRequest;
var PaymentTimeOutModel = models_1.ExternalPaymentsNamespace.PaymentTimeOutModel;
var DismissBehaviourModel = models_1.ExternalPaymentsNamespace.DismissBehaviourModel;
var InternalPaymentUiConfig = models_1.ExternalPaymentsNamespace.InternalPaymentUiConfig;
var Contact = models_1.ExternalPaymentsNamespace.Contact;
var CONTACT_TYPE = models_1.ExternalPaymentsNamespace.CONTACT_TYPE;
const PhonePeSDKInternalConstants_1 = require("./../../constants/PhonePeSDKInternalConstants");
class ExternalPaymentsRequestFactory {
    static microPayRequest(context, version, fallbackURL) {
        let serviceRequestId = context[Constant.kServiceRequestId];
        let payRequest = new MicroPayRequest(context[Constant.kMerchantId], 191, PhonePeSDKInternalConstants_1.InternalConstants.General.v1, fallbackURL, undefined, serviceRequestId);
        payRequest.serviceProviderId = payRequest.merchantId;
        let fulfillContext = {};
        fulfillContext[Constant.kSellingPrice] = context[Constant.kPayableAmount];
        fulfillContext[Constant.kServiceType] = Constant.kServiceTypeValue;
        fulfillContext[Constant.kReservationId] = context[Constant.kReservationId];
        let serviceContext = {};
        serviceContext[Constant.kServiceCategory] = context[Constant.kServiceCategory];
        fulfillContext[Constant.kServiceContext] = serviceContext;
        let quantity = context[Constant.kQuantity];
        if (quantity) {
            fulfillContext[Constant.kQuantity] = context[Constant.kQuantity];
        }
        fulfillContext[Constant.kServiceTypeVersion] = context[Constant.kServiceTypeVersion];
        payRequest.fulFillContext = JSON.stringify(fulfillContext);
        payRequest.discoveryContext = JSON.stringify(this.discoveryContext(payRequest.merchantId));
        let metadata = new PaymentOptionsContextMetadata(payRequest.merchantId, context[Constant.kServiceCategory], payRequest.merchantId, Constant.kServiceTypeValue);
        payRequest.paymentOptionsContext = JSON.stringify(new PaymentOptionsContext(metadata));
        return payRequest;
    }
    static discoveryContext(merchantId) {
        return { 'merchantId': merchantId, 'mode': PhonePeSDKInternalConstants_1.InternalConstants.General.discoveryContextMode };
    }
    static internalPaymentUIConfig(initialAmount, contactName, timeoutInterval, imageURL, confirmationActionButtonProperties, merchantId) {
        let contactList = [new Contact(CONTACT_TYPE.CONTACT_TYPE_MERCHANT, contactName, imageURL, merchantId)];
        let confirmationScreenDuration = PhonePeSDKInternalConstants_1.InternalConstants.General.confirmationScreenDuration;
        let config = new InternalPaymentUiConfig(PhonePeSDKInternalConstants_1.InternalConstants.General.paymentScreenName, initialAmount, contactList, confirmationScreenDuration, confirmationActionButtonProperties);
        if (timeoutInterval !== undefined && timeoutInterval !== null && timeoutInterval > 0) {
            config.paymentTimeout = this.paymentTimeoutModel(timeoutInterval);
        }
        config.paymentDismiss = this.paymentDismissModel();
        return config;
    }
    static paymentTimeoutModel(timeoutInterval) {
        let paymentTimeoutModel = new PaymentTimeOutModel(timeoutInterval, true, Constant.timeoutTitle, Constant.timeoutMessage, Constant.timeoutActionButtonTitle, Constant.PAYMENT_TIMEOUT);
        return paymentTimeoutModel;
    }
    static paymentDismissModel() {
        let paymentDismissModel = new DismissBehaviourModel(true, Constant.dismissTitle, Constant.dismissMessage, Constant.dismissPositiveButtonTitle, Constant.dismissNegativeButtonTitle, Constant.PAYMENT_DISMISS);
        return paymentDismissModel;
    }
}
exports.ExternalPaymentsRequestFactory = ExternalPaymentsRequestFactory;
