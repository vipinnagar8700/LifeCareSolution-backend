"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const PhonePeUtils_1 = require("../../utils/PhonePeUtils");
const NavigationRequest_1 = require("./NavigationRequest");
const MessagingHandler_1 = require("../../core/web/MessagingHandler");
const PhonePeSDKWebConstants_1 = require("./../../constants/PhonePeSDKWebConstants");
class IOSWebNavigationHandler {
    processNavigationRequestAsync(request, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            if (request.screenType === NavigationRequest_1.NavigationScreenType.PaymentsView) {
                let reactViewRequest = request;
                return this.navigateToPayment(reactViewRequest, request.isNewTask, forResult);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.TransactionDetail) {
                let navDetailRequest = request;
                return this.navigateToTransactionDetail(navDetailRequest, request.isNewTask, forResult);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.GenericPaymentsView) {
                let genericReactViewRequest = request;
                return this.navigateToGenericPayment(genericReactViewRequest, request.isNewTask, forResult);
            }
            else {
                return PhonePeUtils_1.PhonePeUtils.returnRejection('Unhandled request type');
            }
        });
    }
    processNavigationRequestForResultAsync(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.processNavigationRequestAsync(request, true);
        });
    }
    navigateToPayment(paymentNavigation, isNewTask, forResult) {
        let obj = paymentNavigation;
        let methodName = PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.NavigationIOS.navigateToPaymentsView;
        return MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(methodName, '', obj);
    }
    navigateToTransactionDetail(detailsNavigation, isNewTask, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            let obj = detailsNavigation;
            let methodName = PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.NavigationIOS.navigateToTransactionDetail;
            return MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(methodName, '', obj);
        });
    }
    navigateToGenericPayment(genericPaymentNavigation, isNewTask, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            let obj = genericPaymentNavigation;
            let methodName = PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.NavigationIOS.navigateToGenericPaymentsView;
            return MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(methodName, '', obj);
        });
    }
    closeAppRequest(request) {
    }
    navigateToMap(latitude, longitude) {
        return Promise.reject('Implementation not found');
    }
    navigateToSwitchApp(microAppConfigString) {
        return Promise.reject('Implementation not found');
    }
}
exports.IOSWebNavigationHandler = IOSWebNavigationHandler;
