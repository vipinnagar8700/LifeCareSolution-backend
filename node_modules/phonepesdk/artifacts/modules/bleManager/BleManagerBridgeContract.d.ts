import { PhonePeEmitterSubscription } from '../../subscription/PhonePeEmitterSubscription';
import { ExternalConstants } from '../../constants/PhonePeSDKExternalConstants';
import BlueToothListenerEvents = ExternalConstants.BlueToothListenerEvents;
export interface BleManagerBridgeContract {
    read(peripheralId: string, serviceUUID: string, characteristicUUID: string): Promise<any>;
    readRSSI(peripheralId: string): Promise<any>;
    refreshCache(peripheralId: string): Promise<any>;
    retrieveServices(peripheralId: string, services: string): Promise<any>;
    write(peripheralId: string, serviceUUID: string, characteristicUUID: string, data: any, maxByteSize: number): Promise<any>;
    writeWithoutResponse(peripheralId: string, serviceUUID: string, characteristicUUID: string, data: any, maxByteSize: number, queueSleepTime: number): Promise<any>;
    connect(peripheralId: string): Promise<any>;
    createBond(peripheralId: string): Promise<any>;
    removeBond(peripheralId: string): Promise<any>;
    disconnect(peripheralId: string): Promise<any>;
    startNotification(peripheralId: string, serviceUUID: string, characteristicUUID: string): Promise<any>;
    stopNotification(peripheralId: string, serviceUUID: string, characteristicUUID: string): Promise<any>;
    checkState(): void;
    start(options: any): Promise<any>;
    scan(serviceUUIDs: string[], seconds: number, allowDuplicates: boolean, scanningOptions: any): Promise<any>;
    stopScan(): Promise<any>;
    enableBluetooth(): Promise<any>;
    getConnectedPeripherals(serviceUUIDs: string[]): Promise<any>;
    getBondedPeripherals(): Promise<any>;
    getDiscoveredPeripherals(): Promise<any>;
    removePeripheral(peripheralId: string): Promise<any>;
    isPeripheralConnected(peripheralId: string, serviceUUIDs: string[]): Promise<any>;
    requestConnectionPriority(peripheralId: string, connectionPriority: string): Promise<any>;
    requestMTU(peripheralId: string, mtu: string): Promise<any>;
    registerBluetoothOperationSuccessCallback(callbackName: string, eventName: BlueToothListenerEvents, callback: (response: any) => void): PhonePeEmitterSubscription;
}
