"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const NavigationRequest_1 = require("./NavigationRequest");
const react_native_1 = require("react-native");
const NavigationModels_android_1 = require("./NavigationModels.android");
const PhonePeSDKInternalConstants_1 = require("./../../constants/PhonePeSDKInternalConstants");
var Activity = PhonePeSDKInternalConstants_1.InternalConstants.ActivityID;
const NativeNavigationRequestFactory_1 = require("./NativeNavigationRequestFactory");
exports.TAG_RESULT_CANCEL = 'RESULT_CANCELED';
exports.KEY_RESULT = 'result';
exports.KEY_RESULT_CODE = 'result_code';
exports.KEY_REQUEST_CODE = 'request_code';
class NativeNavigationRepository {
    static navigateToWebview(url, title, shouldShowToolBar, shouldShowBackButton, screenName, shouldAllowWebViewBack, shouldShowProgressWhileLoading, isNewTask) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodes = [];
            let node1 = new NavigationModels_android_1.Node('webview_activity', 'ACTIVITY', {});
            let nodeData2 = {};
            nodeData2.url = JSON.stringify(url);
            nodeData2.title = JSON.stringify(title);
            nodeData2.shouldShowToolBar = JSON.stringify(shouldShowToolBar);
            nodeData2.shouldShowBackButton = JSON.stringify(shouldShowBackButton);
            nodeData2.screenName = JSON.stringify(screenName);
            nodeData2.shouldAllowWebViewBack = JSON.stringify(shouldAllowWebViewBack);
            nodeData2.shouldShowProgressWhileLoading = JSON.stringify(shouldShowProgressWhileLoading);
            let node2 = new NavigationModels_android_1.Node('webview_fragment', 'FRAGMENT', nodeData2);
            nodes.push(node1);
            nodes.push(node2);
            let path = new NavigationModels_android_1.Path(nodes);
            return react_native_1.NativeModules.NavigationBridge.navigateToPath(JSON.stringify(path), 101, isNewTask ? 0x10000000 : 0);
        });
    }
    static navigateToPWA(request) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodes = [];
            const data = {
                microAppWebConfig: JSON.stringify(request)
            };
            let node1 = new NavigationModels_android_1.Node('web_micro_app_activity', 'ACTIVITY', data);
            nodes.push(node1);
            let path = new NavigationModels_android_1.Path(nodes);
            return react_native_1.NativeModules.NavigationBridge.navigateToPath(JSON.stringify(path), 101, 0);
        });
    }
    static navigateToAnotherReactScreen(configParams, isNewTask, _forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodes = [];
            let node1 = new NavigationModels_android_1.Node('react_container_activity', 'ACTIVITY', {});
            let dataForNode2 = {};
            dataForNode2.config = configParams;
            let node2 = new NavigationModels_android_1.Node('rn_fragment_for_react_container_activity', 'FRAGMENT', dataForNode2);
            nodes.push(node1);
            nodes.push(node2);
            let path = new NavigationModels_android_1.Path(nodes);
            return react_native_1.NativeModules.NavigationBridge.navigateToPath(JSON.stringify(path), 102, isNewTask ? 0x10000000 : 0);
        });
    }
    static navigateToPayment(paymentNavigation, isNewTask, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = NativeNavigationRequestFactory_1.NativeNavigationRequestFactory.pathFromPaymentRequest(paymentNavigation, isNewTask);
            if (forResult) {
                return react_native_1.NativeModules.NavigationBridge.navigateToPathForResult(JSON.stringify(path), Activity.payments, isNewTask ? 0x10000000 : 0);
            }
            else {
                return react_native_1.NativeModules.NavigationBridge.navigateToPath(JSON.stringify(path), Activity.payments, isNewTask ? 0x10000000 : 0);
            }
        });
    }
    static navigateToGenericPayment(genericPaymentNavigation, isNewTask, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = NativeNavigationRequestFactory_1.NativeNavigationRequestFactory.pathFromGenericPaymentRequest(genericPaymentNavigation, isNewTask);
            if (forResult) {
                return react_native_1.NativeModules.NavigationBridge.navigateToPathForResult(JSON.stringify(path), Activity.payments, isNewTask ? 0x10000000 : 0);
            }
            else {
                return react_native_1.NativeModules.NavigationBridge.navigateToPath(JSON.stringify(path), Activity.payments, isNewTask ? 0x10000000 : 0);
            }
        });
    }
    static navigateToMandateInitialization(mandateNavigation, isNewTask, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodes = [];
            let node1 = new NavigationModels_android_1.Node('mandate_activity', 'ACTIVITY', {});
            let nodeData2 = {};
            nodeData2.mandateContext = JSON.stringify(JSON.stringify(mandateNavigation.mandateContext));
            nodeData2.mandateUiConfig = JSON.stringify(mandateNavigation.mandateUiConfig);
            nodeData2.mandateType = mandateNavigation.mandateType;
            let node2 = new NavigationModels_android_1.Node('micro_app_set_mandate_fragment', 'FRAGMENT', nodeData2);
            nodes.push(node1);
            nodes.push(node2);
            let path = new NavigationModels_android_1.Path(nodes);
            if (forResult) {
                return react_native_1.NativeModules.NavigationBridge.navigateToPathForResult(JSON.stringify(path), Activity.payments, isNewTask ? 0x10000000 : 0);
            }
            else {
                return react_native_1.NativeModules.NavigationBridge.navigateToPath(JSON.stringify(path), Activity.payments, isNewTask ? 0x10000000 : 0);
            }
        });
    }
    static navigateToAddToWallet(addToWalletNavigation, isNewTask, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodes = [];
            let node1 = new NavigationModels_android_1.Node('path_phonepe_wallet_activity', 'ACTIVITY', {});
            let nodeData2 = {};
            nodeData2.uiConfig = JSON.stringify(addToWalletNavigation.addToWalletUiContext);
            let node2 = new NavigationModels_android_1.Node('wallet_summary', 'FRAGMENT', nodeData2);
            nodes.push(node1);
            nodes.push(node2);
            let path = new NavigationModels_android_1.Path(nodes);
            if (forResult) {
                return react_native_1.NativeModules.NavigationBridge.navigateToPathForResult(JSON.stringify(path), Activity.payments, isNewTask ? 0x10000000 : 0);
            }
            else {
                return react_native_1.NativeModules.NavigationBridge.navigateToPath(JSON.stringify(path), Activity.payments, isNewTask ? 0x10000000 : 0);
            }
        });
    }
    static navigateToContactPicker(contactPickerNavigation, isNewTask, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodes = [];
            let node1 = new NavigationModels_android_1.Node('contact_picker_activity', 'ACTIVITY', {});
            let nodeData2 = {};
            nodeData2.mode = JSON.stringify(contactPickerNavigation.contactPickerMode);
            nodeData2.initialContacts = JSON.stringify(contactPickerNavigation.initialContacts);
            nodeData2.transactionType = JSON.stringify(contactPickerNavigation.transactionType);
            nodeData2.info = JSON.stringify(contactPickerNavigation.originInfo);
            nodeData2.isVpaEnable = JSON.stringify(contactPickerNavigation.isVpaEnable);
            nodeData2.isSelfEnable = JSON.stringify(contactPickerNavigation.isSelfEnable);
            nodeData2.contactType = JSON.stringify(contactPickerNavigation.contactPickerType);
            nodeData2.showPhoneContacts = JSON.stringify(contactPickerNavigation.phoneContact);
            nodeData2.showVpaAccounts = JSON.stringify(contactPickerNavigation.vpaContact);
            nodeData2.showBankAccounts = JSON.stringify(contactPickerNavigation.accountContact);
            let node2 = new NavigationModels_android_1.Node('contact_picker_fragment', 'FRAGMENT', nodeData2);
            nodes.push(node1);
            nodes.push(node2);
            let path = new NavigationModels_android_1.Path(nodes);
            if (forResult) {
                return react_native_1.NativeModules.NavigationBridge.navigateToPathForResult(JSON.stringify(path), 104, isNewTask ? 0x10000000 : 0);
            }
            else {
                return react_native_1.NativeModules.NavigationBridge.navigateToPath(JSON.stringify(path), 104, isNewTask ? 0x10000000 : 0);
            }
        });
    }
    static navigateToTransactionDetail(detailsNavigation, isNewTask, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodes = [];
            let node1 = new NavigationModels_android_1.Node('transaction_details_activity', 'ACTIVITY', {});
            let nodeData2 = {};
            nodeData2.transactionId = JSON.stringify(detailsNavigation.transactionId);
            nodeData2.transactionType = JSON.stringify(detailsNavigation.transactionType);
            nodeData2.originInfo = JSON.stringify(detailsNavigation.info);
            nodeData2.fulfillMentType = 'INAPP';
            let node2 = new NavigationModels_android_1.Node('transaction_details_fragment', 'FRAGMENT', nodeData2);
            nodes.push(node1);
            nodes.push(node2);
            let path = new NavigationModels_android_1.Path(nodes);
            if (forResult) {
                return react_native_1.NativeModules.NavigationBridge.navigateToPathForResult(JSON.stringify(path), Activity.transactionDetails, isNewTask ? 0x10000000 : 0);
            }
            else {
                return react_native_1.NativeModules.NavigationBridge.navigateToPath(JSON.stringify(path), Activity.transactionDetails, isNewTask ? 0x10000000 : 0);
            }
        });
    }
    static navigateToProfilePath(detailsNavigation, isNewTask, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodeData1 = {};
            nodeData1.title = JSON.stringify(detailsNavigation.title);
            let nodes = [];
            let node1 = new NavigationModels_android_1.Node('my_accounts_details', 'ACTIVITY', nodeData1);
            let node2 = new NavigationModels_android_1.Node('user_profile_fragment', 'FRAGMENT', {});
            nodes.push(node1);
            nodes.push(node2);
            let path = new NavigationModels_android_1.Path(nodes);
            if (forResult) {
                return react_native_1.NativeModules.NavigationBridge.navigateToPathForResult(JSON.stringify(path), 106, isNewTask ? 0x10000000 : 0);
            }
            else {
                return react_native_1.NativeModules.NavigationBridge.navigateToPath(JSON.stringify(path), 106, isNewTask ? 0x10000000 : 0);
            }
        });
    }
    static navigateToHelpPage(detailsNavigation, isNewTask, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodeData1 = {};
            nodeData1.transactionId = JSON.stringify(detailsNavigation.transactionId);
            nodeData1.title = JSON.stringify(detailsNavigation.title);
            let nodes = [];
            let node1 = new NavigationModels_android_1.Node('support_webview_activity', 'ACTIVITY', nodeData1);
            let nodeData2 = {};
            nodeData2.url = JSON.stringify(detailsNavigation.url);
            nodeData2.title = JSON.stringify(detailsNavigation.title);
            nodeData2.shouldShowToolBar = JSON.stringify(detailsNavigation.shouldShowToolBar ? 1 : 0);
            nodeData2.freshBotIntentData = JSON.stringify(detailsNavigation.freshBotIntentData);
            nodeData2.shouldAllowWebViewBack = JSON.stringify(detailsNavigation.shouldAllowWebViewBack);
            let node2 = new NavigationModels_android_1.Node('freshbot_webview_fragment', 'FRAGMENT', nodeData2);
            nodes.push(node1);
            nodes.push(node2);
            let path = new NavigationModels_android_1.Path(nodes);
            if (forResult) {
                return react_native_1.NativeModules.NavigationBridge.navigateToPathForResult(JSON.stringify(path), 107, isNewTask ? 0x10000000 : 0);
            }
            else {
                return react_native_1.NativeModules.NavigationBridge.navigateToPath(JSON.stringify(path), 108, isNewTask ? 0x10000000 : 0);
            }
        });
    }
    processNavigationRequestAsync(request, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            if (request.screenType === NavigationRequest_1.NavigationScreenType.WebView) {
                let webViewRequest = request;
                return NativeNavigationRepository.navigateToWebview(webViewRequest.url, webViewRequest.title, webViewRequest.shouldShowToolBar, webViewRequest.shouldShowBackButton, webViewRequest.screenName, webViewRequest.shouldAllowWebViewBack, webViewRequest.shouldShowProgressWhileLoading, request.isNewTask);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.ReactView) {
                let reactViewRequest = request;
                return NativeNavigationRepository.navigateToAnotherReactScreen(JSON.stringify(reactViewRequest), request.isNewTask);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.PaymentsView) {
                let reactViewRequest = request;
                return NativeNavigationRepository.navigateToPayment(reactViewRequest, request.isNewTask, forResult);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.ContactPicker) {
                let reactViewRequest = request;
                return NativeNavigationRepository.navigateToContactPicker(reactViewRequest, request.isNewTask, forResult);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.TransactionDetail) {
                let navDetailRequest = request;
                return NativeNavigationRepository.navigateToTransactionDetail(navDetailRequest, request.isNewTask, forResult);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.Profile) {
                return NativeNavigationRepository.navigateToProfilePath(request, request.isNewTask, forResult);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.HelpPage) {
                return NativeNavigationRepository.navigateToHelpPage(request, request.isNewTask, forResult);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.MandateSetup) {
                return NativeNavigationRepository.navigateToMandateInitialization(request, request.isNewTask, forResult);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.AddToWallet) {
                return NativeNavigationRepository.navigateToAddToWallet(request, request.isNewTask, forResult);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.PWAWebView) {
                return NativeNavigationRepository.navigateToPWA(request);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.GenericPaymentsView) {
                return NativeNavigationRepository.navigateToGenericPayment(request, request.isNewTask, forResult);
            }
            else {
                let appScreenRequest = request;
                return react_native_1.NativeModules.NavigationBridge.navigateToScreen(appScreenRequest.screenName, appScreenRequest.params, 105, request.isNewTask ? 0x10000000 : 0, true);
            }
        });
    }
    processNavigationRequestForResultAsync(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.processNavigationRequestAsync(request, true);
        });
    }
    closeAppRequest(_request) {
        react_native_1.NativeModules.NavigationBridge.closeApp();
    }
    navigateToMap(latitude, longitude) {
        return react_native_1.NativeModules.NavigationBridge.navigateToMap(latitude, longitude);
    }
    navigateToSwitchApp(microAppConfigString) {
        return react_native_1.NativeModules.NavigationBridge.navigateToSwitchApp(microAppConfigString);
    }
}
exports.NativeNavigationRepository = NativeNavigationRepository;
