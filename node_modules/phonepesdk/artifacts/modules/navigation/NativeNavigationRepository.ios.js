"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const NavigationRequest_1 = require("./NavigationRequest");
const react_native_1 = require("react-native");
class NativeNavigationRepository {
    processNavigationRequestAsync(request) {
        return __awaiter(this, void 0, void 0, function* () {
            let serializedRequest = JSON.stringify(request);
            if (request.screenType === NavigationRequest_1.NavigationScreenType.WebView) {
                return yield this.bridge().navigateToWebView(serializedRequest);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.ReactView) {
                return yield this.bridge().navigateToReactView(serializedRequest);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.PaymentsView) {
                return yield this.bridge().navigateToPaymentsView(serializedRequest);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.Profile) {
                return yield this.bridge().navigateToProfileView(serializedRequest);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.TransactionDetail) {
                return yield this.bridge().navigateToTransactionDetail(serializedRequest);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.AppScreen) {
                return yield this.bridge().navigateToScreen(serializedRequest);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.MandateSetup) {
                return yield this.bridge().navigateToMandate(serializedRequest);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.HelpPage) {
                return yield this.bridge().navigateToHelpPage(serializedRequest);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.AddToWallet) {
                return yield this.bridge().navigateToWalletTopup(serializedRequest);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.MicroApp) {
                return yield this.bridge().navigateToMicroApp(serializedRequest);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.GenericPaymentsView) {
                return yield this.bridge().navigateToGenericPaymentsView(serializedRequest);
            }
        });
    }
    processNavigationRequestForResultAsync(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.processNavigationRequestAsync(request);
        });
    }
    bridge() {
        return react_native_1.NativeModules.NavigationBridge;
    }
    closeAppRequest(request) {
        this.bridge().closeApp(request.appIdentifier);
    }
    navigateToMap(latitude, longitude) {
        return Promise.reject('Implementation not found');
    }
    navigateToSwitchApp(microAppConfigString) {
        return Promise.reject('Implementation not found');
    }
}
exports.NativeNavigationRepository = NativeNavigationRepository;
