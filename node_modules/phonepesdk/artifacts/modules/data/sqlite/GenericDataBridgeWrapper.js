"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const DataBridgeWrapper_1 = require("./DataBridgeWrapper");
const react_native_1 = require("react-native");
const Logger_1 = require("../../logging/Logger");
const LoggerFactory_1 = require("../../logging/LoggerFactory");
const NativeDataBridgeFactory_1 = require("./NativeDataBridgeFactory");
const PhonePeSDKInternalConstants_1 = require("../../../constants/PhonePeSDKInternalConstants");
var GenericDataBridge;
(function (GenericDataBridge) {
    class GenericDataBridgeWrapper extends DataBridgeWrapper_1.DataBridgeWrapper {
        constructor(databaseName, databaseVersion, preferenceBridge, onUpgradeCallback, onCreatedCallback, initialiseDatabaseCallback) {
            super(NativeDataBridgeFactory_1.NativeDataBridgeFactory.getNativeDataBridge(databaseName, react_native_1.NativeModules.GenericDataBridge), databaseName);
            this.initialiseDatabaseCallback = initialiseDatabaseCallback;
            this.logger = LoggerFactory_1.LoggerFactory.getLogger('GenericDataBridge');
            this.preferenceBridge = preferenceBridge;
            this.databaseName = databaseName;
            this.databaseVersion = databaseVersion;
            this.onUpgradeCallback = onUpgradeCallback;
            this.onCreatedCallback = onCreatedCallback;
        }
        initialise(callback) {
            this.initialiseDatabase(this.databaseName, this.databaseVersion, this.onUpgradeCallback, this.onCreatedCallback, this.initialiseDatabaseCallback).then(() => callback());
        }
        initialiseDatabase(databaseName, databaseVersion, onUpgradeCallback, onCreatedCallback, dataInitCallback) {
            return __awaiter(this, void 0, void 0, function* () {
                yield react_native_1.NativeModules.GenericDataBridge.initialiseDatabase(databaseName, 1, (oldVersion, newVersion) => {
                    if (Logger_1.Logger.isLoggingEnabled())
                        this.logger.logd('Database ' + databaseName + ' is updated in native from ' + oldVersion + ' to ' + newVersion);
                }, () => {
                    if (Logger_1.Logger.isLoggingEnabled())
                        this.logger.logd('Database ' + databaseName + ' is created in native');
                });
                let currentVersion = yield this.preferenceBridge.getNumber(PhonePeSDKInternalConstants_1.InternalConstants.data_preferences, databaseName, 0);
                if (currentVersion === 0)
                    yield onCreatedCallback();
                else if (currentVersion < databaseVersion)
                    yield onUpgradeCallback(currentVersion, databaseVersion);
                yield this.preferenceBridge.saveNumber(PhonePeSDKInternalConstants_1.InternalConstants.data_preferences, databaseName, databaseVersion);
                yield dataInitCallback();
                if (Logger_1.Logger.isLoggingEnabled())
                    this.logger.logd('Initialisation completed in react');
            });
        }
        onDatabaseCreated(isSuccess) {
            react_native_1.NativeModules.GenericDataBridge.onDatabaseCreated(this.databaseName, this.databaseVersion, isSuccess);
        }
        onDatabaseUpdated(isSuccess) {
            react_native_1.NativeModules.GenericDataBridge.onDatabaseUpdated(this.databaseName, this.databaseVersion, isSuccess);
        }
    }
    GenericDataBridge.GenericDataBridgeWrapper = GenericDataBridgeWrapper;
})(GenericDataBridge = exports.GenericDataBridge || (exports.GenericDataBridge = {}));
