"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const NavigationModels_android_1 = require("./NavigationModels.android");
class NativeNavigationRequestFactory {
    static pathFromPaymentRequest(paymentNavigation, isNewTask) {
        let nodes = [];
        let node1 = new NavigationModels_android_1.Node('payment_activity', 'ACTIVITY', {});
        let nodeData2 = {};
        nodeData2.mode = JSON.stringify(paymentNavigation.mode);
        nodeData2.internalPaymentUiConfig = JSON.stringify(paymentNavigation.internalPaymentUiConfig);
        nodeData2.microPayRequest = JSON.stringify(paymentNavigation.microPayRequest);
        nodeData2.transactionType = JSON.stringify(paymentNavigation.transactionType);
        nodeData2.info = JSON.stringify(paymentNavigation.originInfo);
        nodeData2.metaData = JSON.stringify(paymentNavigation.metaData);
        let node2 = new NavigationModels_android_1.Node('micro_app_payment', 'FRAGMENT', nodeData2);
        nodes.push(node1);
        nodes.push(node2);
        let path = new NavigationModels_android_1.Path(nodes);
        return path;
    }
    static pathFromGenericPaymentRequest(genericPaymentNavigation, isNewTask) {
        let nodes = [];
        let node1 = new NavigationModels_android_1.Node('payment_activity', 'ACTIVITY', {});
        let nodeData2 = {};
        nodeData2.reservationId = genericPaymentNavigation.reservationId;
        nodeData2.fallbackUrl = genericPaymentNavigation.fallbackUrl;
        let node2 = new NavigationModels_android_1.Node('micro_app_aggregator_payment', 'FRAGMENT', nodeData2);
        nodes.push(node1);
        nodes.push(node2);
        let path = new NavigationModels_android_1.Path(nodes);
        return path;
    }
    static pathFromTransactionDetailsRequest(detailsNavigation, isNewTask) {
        let nodes = [];
        let node1 = new NavigationModels_android_1.Node('transaction_details_activity', 'ACTIVITY', {});
        let nodeData2 = {};
        nodeData2.transactionId = JSON.stringify(detailsNavigation.transactionId);
        nodeData2.transactionType = JSON.stringify('TICKETING');
        nodeData2.info = JSON.stringify(detailsNavigation.info);
        let node2 = new NavigationModels_android_1.Node('transaction_details_fragment', 'FRAGMENT', nodeData2);
        nodes.push(node1);
        nodes.push(node2);
        let path = new NavigationModels_android_1.Path(nodes);
        return path;
    }
}
exports.NativeNavigationRequestFactory = NativeNavigationRequestFactory;
