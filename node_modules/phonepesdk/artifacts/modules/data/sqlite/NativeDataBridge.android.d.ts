import { NativeDataBridgeContract } from './NativeDataBridgeContract';
import { EmitterSubscription } from 'react-native';
export declare class AndroidNativeDataBridge implements NativeDataBridgeContract {
    private dataBridge;
    private databaseEventEmitter;
    private databaseName;
    private logMerchantEvent;
    constructor(databaseName: string, dataBridge: any);
    query(tableName: string, columns?: string[], selection?: string, selectionArgs?: any[], groupBy?: string, having?: string, orderBy?: string): Promise<any[]>;
    queryWithLimit(tableName: string, limit: number, columns?: string[], selection?: string, selectionArgs?: any[], groupBy?: string, having?: string, orderBy?: string): Promise<any[]>;
    startTransaction(): Promise<boolean>;
    endTransaction(): Promise<boolean>;
    setTransactionSuccessful(): Promise<boolean>;
    deleteRow(tableName: string, selectionCriteria?: string, selectionArgs?: any[]): Promise<number>;
    execSQL(sqlStatement: string): Promise<boolean>;
    rawQuery(sql?: string, selectionArgs?: any[]): Promise<any[]>;
    setParallelThread(corePoolSize: number, maximumPoolSize: number, keepAliveTime: number): void;
    beginStreamingData(table: string, limit: number, streamId: string, columns?: string[], selection?: string, selectionArgs?: any[], groupBy?: string, having?: string, orderBy?: string): Promise<any[]>;
    nextData(streamId: string, start: number, count: number): Promise<any[]>;
    endData(streamId: string): Promise<boolean>;
    update(table: string, values: {
        [p: string]: any;
    }, whereClause?: string, whereArgs?: any[]): Promise<number>;
    insertWithOnConflict(table: string, initialValues: {
        [p: string]: any;
    }, conflictAlgorithm: number, nullColumnHack?: string): Promise<number>;
    bulkInsertWithOnConflict(table: string, initialColumns: Array<string>, initialValues: Array<Array<any>>, conflictAlgorithm: number, nullColumnHack?: string): Promise<number>;
    addListener(eventId: string): Promise<any>;
    addListenerForSpecificTable(eventId: string, tableName: string): Promise<any>;
    removeListener(eventId: string): Promise<any>;
    addEmitterListener(eventType: string, listener: (...args: any[]) => any, context: any): EmitterSubscription;
}
