"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const PhonePeUtils_1 = require("./../../utils/PhonePeUtils");
const MessagingHandler_1 = require("../../core/web/MessagingHandler");
const NativeNavigationRequestFactory_1 = require("./NativeNavigationRequestFactory");
const NavigationRequest_1 = require("./NavigationRequest");
const PhonePeSDKWebConstants_1 = require("./../../constants/PhonePeSDKWebConstants");
const PhonePeSDKInternalConstants_1 = require("./../../constants/PhonePeSDKInternalConstants");
var Const = PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.Navigation;
var NavigationToMap = PhonePeSDKInternalConstants_1.InternalConstants.NavigationBridge;
var Activity = PhonePeSDKInternalConstants_1.InternalConstants.ActivityID;
class AndroidWebNavigationHandler {
    processNavigationRequestAsync(request, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            if (request.screenType === NavigationRequest_1.NavigationScreenType.PaymentsView) {
                let reactViewRequest = request;
                return this.navigateToPayment(reactViewRequest, request.isNewTask, forResult);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.TransactionDetail) {
                let navDetailRequest = request;
                return this.navigateToTransactionDetail(navDetailRequest, request.isNewTask, forResult);
            }
            else if (request.screenType === NavigationRequest_1.NavigationScreenType.GenericPaymentsView) {
                let genericReactViewRequest = request;
                return this.navigateToGenericPayment(genericReactViewRequest, request.isNewTask, forResult);
            }
            else {
                return PhonePeUtils_1.PhonePeUtils.returnRejection('Unhandled request type');
            }
        });
    }
    processNavigationRequestForResultAsync(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.processNavigationRequestAsync(request, true);
        });
    }
    navigateToPayment(paymentNavigation, isNewTask, forResult) {
        let path = NativeNavigationRequestFactory_1.NativeNavigationRequestFactory.pathFromPaymentRequest(paymentNavigation, isNewTask);
        let obj = this.objectForNavigation(path, Activity.payments, isNewTask);
        if (forResult) {
            return MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.navigateToPathForResult, Const.androidBridgeName, obj);
        }
        else {
            return MessagingHandler_1.MessagingHandler.callNative(Const.navigateToPath, Const.androidBridgeName, obj);
        }
    }
    navigateToTransactionDetail(detailsNavigation, isNewTask, forResult) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = NativeNavigationRequestFactory_1.NativeNavigationRequestFactory.pathFromTransactionDetailsRequest(detailsNavigation, isNewTask);
            let obj = this.objectForNavigation(path, Activity.transactionDetails, isNewTask);
            if (forResult) {
                return MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.navigateToPathForResult, Const.androidBridgeName, obj);
            }
            else {
                return MessagingHandler_1.MessagingHandler.callNative(Const.navigateToPath, Const.androidBridgeName, obj);
            }
        });
    }
    navigateToGenericPayment(paymentNavigation, isNewTask, forResult) {
        let path = NativeNavigationRequestFactory_1.NativeNavigationRequestFactory.pathFromGenericPaymentRequest(paymentNavigation, isNewTask);
        let obj = this.objectForNavigation(path, Activity.payments, isNewTask);
        if (forResult) {
            return MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.navigateToPathForResult, Const.androidBridgeName, obj);
        }
        else {
            return MessagingHandler_1.MessagingHandler.callNative(Const.navigateToPath, Const.androidBridgeName, obj);
        }
    }
    objectForNavigation(path, activityId, isNewTask) {
        let obj = {};
        obj[AndroidWebNavigationHandler.pathKey] = JSON.stringify(path);
        obj[AndroidWebNavigationHandler.activityIdKey] = activityId;
        obj[AndroidWebNavigationHandler.isNewTaskKey] = isNewTask ? 0x10000000 : 0;
        return obj;
    }
    closeAppRequest(request) {
    }
    navigateToMap(latitude, longitude) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(NavigationToMap.navigateToMap, NavigationToMap.bridgeName, { latitude, longitude }).then((res) => {
                resolve(JSON.parse(res));
            }).catch((err) => {
                reject(err);
            });
        });
    }
    navigateToSwitchApp(microAppConfigString) {
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(NavigationToMap.navigateToSwitchApp, NavigationToMap.bridgeName, microAppConfigString).then((res) => {
                resolve(JSON.parse(res));
            }).catch((err) => {
                reject(err);
            });
        });
    }
}
AndroidWebNavigationHandler.pathKey = 'path';
AndroidWebNavigationHandler.activityIdKey = 'activityId';
AndroidWebNavigationHandler.isNewTaskKey = 'isNewTask';
exports.AndroidWebNavigationHandler = AndroidWebNavigationHandler;
