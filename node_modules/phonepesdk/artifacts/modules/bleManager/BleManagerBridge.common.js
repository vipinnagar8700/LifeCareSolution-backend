"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_native_1 = require("react-native");
const react_native_2 = require("react-native");
const PhonePeReactSubscription_1 = require("../../subscription/PhonePeReactSubscription");
class CommonPPBleManager {
    constructor(bridge) {
        this.isPeripheralConnected = this.isPeripheralConnected.bind(this);
        this.eventEmitter = new react_native_2.NativeEventEmitter(bridge);
    }
    read(peripheralId, serviceUUID, characteristicUUID) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.read(peripheralId, serviceUUID, characteristicUUID, (error, data) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill(data);
                }
            });
        });
    }
    registerBluetoothOperationSuccessCallback(callbackName, eventName, callback) {
        let emitterSubscription = this.eventEmitter.addListener(eventName, callback);
        let phonepeSubscription = new PhonePeReactSubscription_1.PhonePeReactSubscription(callbackName, eventName, callback, emitterSubscription);
        return phonepeSubscription;
    }
    readRSSI(peripheralId) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.readRSSI(peripheralId, (error, rssi) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill(rssi);
                }
            });
        });
    }
    refreshCache(peripheralId) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.refreshCache(peripheralId, (error, result) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill(result);
                }
            });
        });
    }
    retrieveServices(peripheralId, services) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.retrieveServices(peripheralId, services, (error, peripheral) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill(peripheral);
                }
            });
        });
    }
    write(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize = 20) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.write(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    writeWithoutResponse(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize = 20, queueSleepTime = 10) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.writeWithoutResponse(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize, queueSleepTime, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    connect(peripheralId) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.connect(peripheralId, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    createBond(peripheralId) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.createBond(peripheralId, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    removeBond(peripheralId) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.removeBond(peripheralId, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    disconnect(peripheralId) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.disconnect(peripheralId, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    startNotification(peripheralId, serviceUUID, characteristicUUID) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.startNotification(peripheralId, serviceUUID, characteristicUUID, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    stopNotification(peripheralId, serviceUUID, characteristicUUID) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.stopNotification(peripheralId, serviceUUID, characteristicUUID, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    checkState() {
        react_native_1.NativeModules.BleManager.checkState();
    }
    start(options) {
        return new Promise((fulfill, reject) => {
            if (!options) {
                options = {};
            }
            react_native_1.NativeModules.BleManager.start(options, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    scan(serviceUUIDs, seconds, allowDuplicates = false, scanningOptions = {}) {
        return new Promise((fulfill, reject) => {
            if (!scanningOptions.numberOfMatches) {
                scanningOptions.numberOfMatches = 3;
            }
            if (!scanningOptions.matchMode) {
                scanningOptions.matchMode = 1;
            }
            if (!scanningOptions.scanMode) {
                scanningOptions.scanMode = 0;
            }
            react_native_1.NativeModules.BleManager.scan(serviceUUIDs, seconds, allowDuplicates, scanningOptions, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    stopScan() {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.stopScan((error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    enableBluetooth() {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.enableBluetooth((error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    getConnectedPeripherals(serviceUUIDs) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.getConnectedPeripherals(serviceUUIDs, (error, result) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (result) {
                        fulfill(result);
                    }
                    else {
                        fulfill([]);
                    }
                }
            });
        });
    }
    getBondedPeripherals() {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.getBondedPeripherals((error, result) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (result) {
                        fulfill(result);
                    }
                    else {
                        fulfill([]);
                    }
                }
            });
        });
    }
    getDiscoveredPeripherals() {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.getDiscoveredPeripherals((error, result) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (result) {
                        fulfill(result);
                    }
                    else {
                        fulfill([]);
                    }
                }
            });
        });
    }
    removePeripheral(peripheralId) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.removePeripheral(peripheralId, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill();
                }
            });
        });
    }
    isPeripheralConnected(peripheralId, serviceUUIDs) {
        return this.getConnectedPeripherals(serviceUUIDs).then(result => {
            if (result.find((p) => {
                return p.id === peripheralId;
            })) {
                return true;
            }
            else {
                return false;
            }
        });
    }
    requestConnectionPriority(peripheralId, connectionPriority) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.requestConnectionPriority(peripheralId, connectionPriority, (error, status) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill(status);
                }
            });
        });
    }
    requestMTU(peripheralId, _mtu) {
        return new Promise((fulfill, reject) => {
            react_native_1.NativeModules.BleManager.requestMTU(peripheralId, _mtu, (error, mtu) => {
                if (error) {
                    reject(error);
                }
                else {
                    fulfill(mtu);
                }
            });
        });
    }
}
exports.CommonPPBleManager = CommonPPBleManager;
