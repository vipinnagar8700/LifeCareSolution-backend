"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MessagingHandler_1 = require("../../core/web/MessagingHandler");
const PhonePeSDKExternalConstants_1 = require("./../../constants/PhonePeSDKExternalConstants");
const PhonePeSDKInternalConstants_1 = require("./../../constants/PhonePeSDKInternalConstants");
var Permission = PhonePeSDKExternalConstants_1.ExternalConstants.Permission;
var Const = PhonePeSDKInternalConstants_1.InternalConstants.PermissionsBridge;
class WebPermissionsBridgeiOS {
    constructor(operatingSystem) {
        this.operatingSystem = operatingSystem;
    }
    seekPermission(listOfPermissions) {
        let promises = listOfPermissions.map(permission => {
            if (permission === Permission.LOCATION) {
                let rValue = {};
                rValue[Const.kPermission] = permission;
                if (navigator.geolocation) {
                    return new Promise((res, rej) => {
                        navigator.geolocation.getCurrentPosition((location) => {
                            rValue[Const.kPermissionStatus] = true;
                            rValue[Const.kShowAgain] = false;
                            res(rValue);
                        }, (error) => {
                            if (error && error.code === 1) {
                                rValue[Const.kPermissionStatus] = false;
                                rValue[Const.kShowAgain] = false;
                                res(rValue);
                            }
                            else {
                                rValue[Const.kPermissionStatus] = true;
                                rValue[Const.kShowAgain] = false;
                                res(rValue);
                            }
                        }, { timeout: 100 });
                    });
                }
                else {
                    rValue[Const.kPermissionStatus] = false;
                    rValue[Const.kShowAgain] = false;
                    return rValue;
                }
            }
            else {
                let rValue = {};
                rValue[Const.kPermission] = permission;
                rValue[Const.kPermissionStatus] = false;
                rValue[Const.kShowAgain] = false;
                return rValue;
            }
        });
        return Promise.all(promises);
    }
    openSettingsPageForPermission() {
        return MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.openSettingsPage, Const.name, {});
    }
}
exports.WebPermissionsBridgeiOS = WebPermissionsBridgeiOS;
