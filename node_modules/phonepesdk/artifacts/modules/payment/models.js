"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ExternalPaymentModels_1 = require("./ExternalPaymentModels");
var ActionButtonProp = ExternalPaymentModels_1.ExternalPaymentModels.ActionButtonProp;
var ExternalPaymentsNamespace;
(function (ExternalPaymentsNamespace) {
    let Constant;
    (function (Constant) {
        Constant.discoveryModeValue = 'PEER_TO_MERCHANT';
        Constant.title = 'Pay';
        Constant.transactionType = 'SENT_PAYMENT';
        Constant.timeoutTitle = 'Payment Expired';
        Constant.timeoutMessage = 'Sorry! Your payment request timed out. Please try again.';
        Constant.timeoutActionButtonTitle = 'OK';
        Constant.dismissTitle = 'Are you sure?';
        Constant.dismissMessage = 'Going back will cancel the payment. Are you sure you want to proceed?';
        Constant.dismissPositiveButtonTitle = 'I\'m sure';
        Constant.dismissNegativeButtonTitle = 'Dismiss';
        Constant.PAYMENT_TIMEOUT = 'PAYMENT_TIMEOUT';
        Constant.PAYMENT_DISMISS = 'PAYMENT_DISMISS';
        Constant.kMerchantId = 'merchantId';
        Constant.kSellingPrice = 'sellingPrice';
        Constant.kPayableAmount = 'payableAmount';
        Constant.kServiceType = 'serviceType';
        Constant.kServiceTypeValue = 'WEBAPP';
        Constant.kReservationId = 'reservationId';
        Constant.kServiceRequestId = 'serviceRequestId';
        Constant.kServiceCategory = 'serviceCategory';
        Constant.kServiceCategoryValue = 'WEB';
        Constant.kServiceContext = 'serviceContext';
        Constant.kQuantity = 'quantity';
        Constant.kValidFor = 'validFor';
        Constant.kMerchantTransactionId = 'merchantTransactionId';
        Constant.kServiceTypeVersion = 'serviceTypeVersion';
        Constant.kKey = 'key';
        Constant.kValue = 'value';
    })(Constant = ExternalPaymentsNamespace.Constant || (ExternalPaymentsNamespace.Constant = {}));
    let CONTACT_TYPE;
    (function (CONTACT_TYPE) {
        CONTACT_TYPE[CONTACT_TYPE["CONTACT_TYPE_VPA"] = 1] = "CONTACT_TYPE_VPA";
        CONTACT_TYPE[CONTACT_TYPE["CONTACT_TYPE_PHONE"] = 2] = "CONTACT_TYPE_PHONE";
        CONTACT_TYPE[CONTACT_TYPE["CONTACT_TYPE_MERCHANT"] = 3] = "CONTACT_TYPE_MERCHANT";
        CONTACT_TYPE[CONTACT_TYPE["CONTACT_TYPE_USER_DATA"] = 4] = "CONTACT_TYPE_USER_DATA";
        CONTACT_TYPE[CONTACT_TYPE["CONTACT_TYPE_EXTERNAL_UPI_MERCHANT"] = 5] = "CONTACT_TYPE_EXTERNAL_UPI_MERCHANT";
        CONTACT_TYPE[CONTACT_TYPE["CONTACT_TYPE_RETAIL_MERCHANT"] = 6] = "CONTACT_TYPE_RETAIL_MERCHANT";
        CONTACT_TYPE[CONTACT_TYPE["CONTACT_TYPE_BANK_ACCOUNT"] = 7] = "CONTACT_TYPE_BANK_ACCOUNT";
        CONTACT_TYPE[CONTACT_TYPE["CONTACT_TYPE_WALLET"] = 8] = "CONTACT_TYPE_WALLET";
        CONTACT_TYPE[CONTACT_TYPE["CONTACT_TYPE_MY_ACCOUNT"] = 9] = "CONTACT_TYPE_MY_ACCOUNT";
    })(CONTACT_TYPE = ExternalPaymentsNamespace.CONTACT_TYPE || (ExternalPaymentsNamespace.CONTACT_TYPE = {}));
    let PAYMENT_MODE;
    (function (PAYMENT_MODE) {
        PAYMENT_MODE[PAYMENT_MODE["MODE_SEND_MONEY"] = 1] = "MODE_SEND_MONEY";
        PAYMENT_MODE[PAYMENT_MODE["MODE_SPLIT_MONEY"] = 2] = "MODE_SPLIT_MONEY";
        PAYMENT_MODE[PAYMENT_MODE["REQUEST_MONEY"] = 3] = "REQUEST_MONEY";
        PAYMENT_MODE[PAYMENT_MODE["MODE_RECHARGE_MOBILE"] = 4] = "MODE_RECHARGE_MOBILE";
        PAYMENT_MODE[PAYMENT_MODE["MODE_WALLET_TOP_UP"] = 5] = "MODE_WALLET_TOP_UP";
        PAYMENT_MODE[PAYMENT_MODE["MODE_BLE_PAYMENT"] = 6] = "MODE_BLE_PAYMENT";
    })(PAYMENT_MODE = ExternalPaymentsNamespace.PAYMENT_MODE || (ExternalPaymentsNamespace.PAYMENT_MODE = {}));
    let TRANSACTION_TYPE;
    (function (TRANSACTION_TYPE) {
        TRANSACTION_TYPE["SENT_PAYMENT"] = "SENT_PAYMENT";
        TRANSACTION_TYPE["RECEIVED_PAYMENT"] = "RECEIVED_PAYMENT";
        TRANSACTION_TYPE["USER_TO_USER_SENT_REQUEST"] = "USER_TO_USER_SENT_REQUEST";
        TRANSACTION_TYPE["USER_TO_USER_RECEIVED_REQUEST"] = "USER_TO_USER_RECEIVED_REQUEST";
        TRANSACTION_TYPE["ENSEMBLE_SENT_PAYMENT"] = "ENSEMBLE_SENT_PAYMENT";
        TRANSACTION_TYPE["MISSED_PAYMENT"] = "MISSED_PAYMENT";
        TRANSACTION_TYPE["PHONE_RECHARGE"] = "PHONE_RECHARGE";
        TRANSACTION_TYPE["BILL_PAYMENT"] = "BILL_PAYMENT";
        TRANSACTION_TYPE["TICKETING"] = "TICKETING";
        TRANSACTION_TYPE["COMMUTE"] = "COMMUTE";
        TRANSACTION_TYPE["UNKNOWN"] = "UNKNOWN";
    })(TRANSACTION_TYPE = ExternalPaymentsNamespace.TRANSACTION_TYPE || (ExternalPaymentsNamespace.TRANSACTION_TYPE = {}));
    let TRANSFER_MODE;
    (function (TRANSFER_MODE) {
        TRANSFER_MODE["MERCHANT_REVERSAL"] = "MERCHANT_REVERSAL";
        TRANSFER_MODE["MERCHANT_CASHBACK"] = "MERCHANT_CASHBACK";
    })(TRANSFER_MODE = ExternalPaymentsNamespace.TRANSFER_MODE || (ExternalPaymentsNamespace.TRANSFER_MODE = {}));
    class Contact {
        constructor(contactType, name, displayImageUrl, lookUpId) {
            this.type = contactType;
            this.name = name;
            this.displayImageUrl = displayImageUrl;
            this.lookupId = lookUpId;
        }
    }
    ExternalPaymentsNamespace.Contact = Contact;
    class InternalPaymentUiConfig {
        constructor(title, initialAmount, initialContactList, confirmationScreenDuration, confirmationActionButtonProperties, shouldConfirmationCloseOnFailure) {
            this.isAmountEditable = false;
            this.isInitialContactEditable = false;
            this.isNoteEditable = false;
            this.showRateMeDialog = false;
            this.title = title;
            this.initialAmount = initialAmount;
            this.initialContactList = initialContactList;
            this.confirmationScreenDuration = confirmationScreenDuration;
            if (confirmationActionButtonProperties) {
                this.confirmationActionButtonProperties = confirmationActionButtonProperties;
            }
            else {
                let dummyProperties = {
                    'PENDING': new ActionButtonProp('DONE'),
                    'COMPLETED': new ActionButtonProp('VIEW BOOKING'),
                    'ERRORED': new ActionButtonProp('DONE'),
                    'DEFAULT': new ActionButtonProp('DONE')
                };
                this.confirmationActionButtonProperties = dummyProperties;
            }
            if (shouldConfirmationCloseOnFailure) {
                this.shouldConfirmationCloseOnFailure = shouldConfirmationCloseOnFailure;
            }
            else {
                this.shouldConfirmationCloseOnFailure = false;
            }
        }
    }
    ExternalPaymentsNamespace.InternalPaymentUiConfig = InternalPaymentUiConfig;
    class PayRequest {
        constructor(allowedInstruments) {
            this.allowedInstruments = allowedInstruments;
            this.supportedInstruments = allowedInstruments;
        }
    }
    ExternalPaymentsNamespace.PayRequest = PayRequest;
    class MicroPayRequest extends PayRequest {
        constructor(merchantId, allowedInstruments, version, fallbackURL, paymentOptionsContext, serviceRequestId) {
            super(allowedInstruments);
            this.merchantId = merchantId;
            this.serviceVersion = version;
            this.fallbackURL = fallbackURL;
            this.paymentOptionsContext = paymentOptionsContext;
            this.serviceRequestId = serviceRequestId;
        }
    }
    ExternalPaymentsNamespace.MicroPayRequest = MicroPayRequest;
    class PaymentTimeOutModel {
        constructor(time, showDialog, title, message, actionButtonName, errorCode) {
            this.time = time;
            this.showDialog = showDialog;
            this.title = title;
            this.message = message;
            this.actionButtonName = actionButtonName;
            this.errorCode = errorCode;
        }
    }
    ExternalPaymentsNamespace.PaymentTimeOutModel = PaymentTimeOutModel;
    class DismissBehaviourModel {
        constructor(showDialog, title, message, positiveButton, negativeButton, errorCode) {
            this.showDialog = showDialog;
            this.title = title;
            this.message = message;
            this.positiveButton = positiveButton;
            this.negativeButton = negativeButton;
            this.errorCode = errorCode;
        }
    }
    ExternalPaymentsNamespace.DismissBehaviourModel = DismissBehaviourModel;
    class TopUpConsentContext {
        constructor(showDialog, title, message) {
            this.showDialog = showDialog;
            this.title = title;
            this.message = message;
        }
    }
    ExternalPaymentsNamespace.TopUpConsentContext = TopUpConsentContext;
    class AddToWalletUiContext {
        constructor(walletPageTitle, suggestedAmount, showCloseWalletOption, hideWalletWithdrawal, minAmount, showRateMeDialog, isAmountEditable, confirmationScreenDuration, showTopupConsent, topUpConsentContext, paymentDismiss, paymentOptionsContext) {
            this.walletPageTitle = walletPageTitle;
            this.suggestedAmount = suggestedAmount;
            this.showCloseWalletOption = showCloseWalletOption;
            this.hideWalletWithdrawal = hideWalletWithdrawal;
            this.minAmount = minAmount;
            this.showRateMeDialog = showRateMeDialog;
            this.isAmountEditable = isAmountEditable;
            this.confirmationScreenDuration = confirmationScreenDuration;
            this.showTopupConsent = showTopupConsent;
            this.topUpConsentContext = topUpConsentContext;
            this.paymentDismiss = paymentDismiss;
            this.paymentOptionsContext = paymentOptionsContext;
        }
    }
    ExternalPaymentsNamespace.AddToWalletUiContext = AddToWalletUiContext;
    class MandateConfig {
        constructor(type, merchantId, serviceProviderIds, serviceType, serviceCategory, entityType) {
            this.type = type;
            this.merchantId = merchantId;
            this.serviceProviderIds = serviceProviderIds;
            this.serviceType = serviceType;
            this.serviceCategory = serviceCategory;
            this.entityType = entityType;
        }
    }
    ExternalPaymentsNamespace.MandateConfig = MandateConfig;
    class MandateVisibleProperties {
        constructor(amount, frequency, autoPayDay, payeeWidget, toolbar) {
            this.amount = amount;
            this.frequency = frequency;
            this.autoPayDay = autoPayDay;
            this.payeeWidget = payeeWidget;
            this.toolbar = toolbar;
        }
    }
    ExternalPaymentsNamespace.MandateVisibleProperties = MandateVisibleProperties;
    class MandateUiConfig {
        constructor(visibilityProperty, analyticsInfo, successMessage, actionButtonText, title, merchantName, merchantMandateDescription, merchantBannerImageId, merchantBannerImageSection, merchantImageId, merchantImageSection, mandateInfoLink, confirmationScreenDuration, dismissButtonDisplayTimeout, contactId) {
            this.visibilityProperty = visibilityProperty;
            this.analyticsInfo = analyticsInfo;
            this.successMessage = successMessage;
            this.actionButtonText = actionButtonText;
            this.title = title;
            this.merchantName = merchantName;
            this.merchantMandateDescription = merchantMandateDescription;
            this.merchantBannerImageId = merchantBannerImageId;
            this.merchantBannerImageSection = merchantBannerImageSection;
            this.merchantImageId = merchantImageId;
            this.merchantImageSection = merchantImageSection;
            this.mandateInfoLink = mandateInfoLink;
            this.confirmationScreenDuration = confirmationScreenDuration;
            this.dismissButtonDisplayTimeout = dismissButtonDisplayTimeout;
            this.contactId = contactId;
        }
    }
    ExternalPaymentsNamespace.MandateUiConfig = MandateUiConfig;
    class PaymentOptionsContext {
        constructor(metaData) {
            this.type = 'FULFILL_SERVICE';
            this.metaData = metaData;
        }
    }
    ExternalPaymentsNamespace.PaymentOptionsContext = PaymentOptionsContext;
    class PaymentOptionsContextMetadata {
        constructor(merchantId, serviceCategory, serviceProviderId, serviceType) {
            this.merchantId = merchantId;
            this.serviceCategory = serviceCategory;
            this.serviceProviderId = serviceProviderId;
            this.serviceType = serviceType;
        }
    }
    ExternalPaymentsNamespace.PaymentOptionsContextMetadata = PaymentOptionsContextMetadata;
})(ExternalPaymentsNamespace = exports.ExternalPaymentsNamespace || (exports.ExternalPaymentsNamespace = {}));
