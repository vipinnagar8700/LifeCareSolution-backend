import { BaseNavigationRequest, CloseAppNavRequest } from './NavigationRequest';
import { NativeNavigationRepositoryContract } from './NativeNavigationRepositoryContract';
export declare const TAG_RESULT_CANCEL = "RESULT_CANCELED";
export declare const KEY_RESULT = "result";
export declare const KEY_RESULT_CODE = "result_code";
export declare const KEY_REQUEST_CODE = "request_code";
export declare class NativeNavigationRepository implements NativeNavigationRepositoryContract {
    private static navigateToWebview(url, title, shouldShowToolBar, shouldShowBackButton, screenName, shouldAllowWebViewBack, shouldShowProgressWhileLoading, isNewTask);
    private static navigateToPWA(request);
    private static navigateToAnotherReactScreen(configParams, isNewTask, _forResult?);
    private static navigateToPayment(paymentNavigation, isNewTask, forResult?);
    private static navigateToGenericPayment(genericPaymentNavigation, isNewTask, forResult?);
    private static navigateToMandateInitialization(mandateNavigation, isNewTask, forResult?);
    private static navigateToAddToWallet(addToWalletNavigation, isNewTask, forResult?);
    private static navigateToContactPicker(contactPickerNavigation, isNewTask, forResult?);
    private static navigateToTransactionDetail(detailsNavigation, isNewTask, forResult?);
    private static navigateToProfilePath(detailsNavigation, isNewTask, forResult?);
    private static navigateToHelpPage(detailsNavigation, isNewTask, forResult?);
    processNavigationRequestAsync(request: BaseNavigationRequest, forResult?: boolean): Promise<any>;
    processNavigationRequestForResultAsync(request: BaseNavigationRequest): Promise<any>;
    closeAppRequest(_request: CloseAppNavRequest): void;
    navigateToMap(latitude: number, longitude: number): Promise<any>;
    navigateToSwitchApp(microAppConfigString: any): Promise<any>;
}
