"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PhonePeSDKExternalConstants_1 = require("./../constants/PhonePeSDKExternalConstants");
const PhonePeSDKInternalConstants_1 = require("./../constants/PhonePeSDKInternalConstants");
var Permission = PhonePeSDKExternalConstants_1.ExternalConstants.Permission;
class PhonePeUtils {
    static assert(condition, message) {
        if (!condition) {
            throw new Error(message);
        }
    }
    static assertString(param, allowUndefined) {
        PhonePeUtils.assertType(param, 'string', allowUndefined);
    }
    static assertNumber(param, allowUndefined) {
        PhonePeUtils.assertType(param, 'number', allowUndefined);
    }
    static assertBoolean(param, allowUndefined) {
        PhonePeUtils.assertType(param, 'boolean', allowUndefined);
    }
    static assertFunction(param, allowUndefined) {
        PhonePeUtils.assertType(param, 'function', allowUndefined);
    }
    static assertArray(param, allowUndefined) {
        if ((allowUndefined && !param) || param.constructor === Array) {
            return;
        }
        throw new TypeError(PhonePeSDKInternalConstants_1.InternalConstants.ErrorCode.invalidParams);
    }
    static assertObject(param, allowUndefined) {
        PhonePeUtils.assertType(param, 'object', allowUndefined);
    }
    static assertType(param, type, allowUndefined) {
        if ((allowUndefined && !param) || typeof param === type) {
            return;
        }
        throw new TypeError(PhonePeSDKInternalConstants_1.InternalConstants.ErrorCode.invalidParams);
    }
    static returnResolution(data) {
        return new Promise((resolve, reject) => {
            resolve(data);
        });
    }
    static returnRejection(reason) {
        return new Promise((resolve, reject) => {
            reject(reason);
        });
    }
    static isValidSpecies(species) {
        return species === PhonePeSDKExternalConstants_1.ExternalConstants.Species.web || species === PhonePeSDKExternalConstants_1.ExternalConstants.Species.native;
    }
    static isValidOS(os) {
        return os === PhonePeSDKExternalConstants_1.ExternalConstants.OS.ios || os === PhonePeSDKExternalConstants_1.ExternalConstants.OS.android;
    }
    static createuuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    static osSpecificPermissionNames(listOfPermissions, os) {
        let res = [];
        for (let name of listOfPermissions) {
            if (os === PhonePeSDKExternalConstants_1.ExternalConstants.OS.ios) {
                res.push(Permission[name]);
            }
            else {
                let androidName = '';
                if (name === Permission.LOCATION) {
                    androidName = PhonePeSDKInternalConstants_1.InternalConstants.PermissionsBridge.androidPrefix + PhonePeSDKInternalConstants_1.InternalConstants.PermissionsBridge.locationPermissionName;
                }
                else {
                    androidName = PhonePeSDKInternalConstants_1.InternalConstants.PermissionsBridge.androidPrefix + Permission[name];
                }
                res.push(androidName);
            }
        }
        return res;
    }
    static strippedPermissionName(permission, os) {
        if (os === PhonePeSDKExternalConstants_1.ExternalConstants.OS.ios) {
            return permission;
        }
        let prefix = PhonePeSDKInternalConstants_1.InternalConstants.PermissionsBridge.androidPrefix;
        let strippedPermission = permission.replace(new RegExp('^' + prefix), '');
        if (strippedPermission === PhonePeSDKInternalConstants_1.InternalConstants.PermissionsBridge.locationPermissionName) {
            strippedPermission = Permission.LOCATION;
        }
        return strippedPermission;
    }
    static isValidMethodOniOS(methodName) {
        let localWebkit = window.webkit;
        return localWebkit && localWebkit.messageHandlers && localWebkit.messageHandlers[methodName] &&
            typeof localWebkit.messageHandlers[methodName].postMessage === 'function';
    }
    static getReserveOrderPayload(payload, providerId) {
        const headers = {};
        headers['X-PROVIDER-ID'] = providerId;
        return ({
            headers,
            body: payload
        });
    }
}
exports.PhonePeUtils = PhonePeUtils;
