"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const NavigationRequest_1 = require("./../modules/navigation/NavigationRequest");
const NativeOAuthBridgeFactory_1 = require("./../modules/auth/NativeOAuthBridgeFactory");
const NativeAnalyticsBridgeFactory_1 = require("./../modules/analytics/NativeAnalyticsBridgeFactory");
const NativePermissionsBridgeFactory_1 = require("./../modules/permissions/NativePermissionsBridgeFactory");
const MethodVersioningHandler_1 = require("../modules/versioning/MethodVersioningHandler");
const PhonePeUtils_1 = require("./../utils/PhonePeUtils");
const ExternalNavigationFactory_1 = require("./../modules/navigation/ExternalNavigationFactory");
const LocationBridgeFactory_1 = require("./../modules/location/LocationBridgeFactory");
const NativeNavigationFactory_1 = require("./../modules/navigation/NativeNavigationFactory");
const NativePreferenceBridgeFactory_1 = require("../modules/data/preferences/NativePreferenceBridgeFactory");
const NativeDeviceInfoBridgeFactory_1 = require("../modules/deviceInfo/NativeDeviceInfoBridgeFactory");
const NativeOrderActionBridgeFactory_1 = require("../modules/orderAction/NativeOrderActionBridgeFactory");
const NativeFilePickerBridgeFactory_1 = require("../modules/filePicker/NativeFilePickerBridgeFactory");
const OrientationBridgeFactory_1 = require("../modules/orientation/OrientationBridgeFactory");
const MessagingHandler_1 = require("./web/MessagingHandler");
const EventHandler_1 = require("./web/EventHandler");
const PhonePeSDKInternalConstants_1 = require("../constants/PhonePeSDKInternalConstants");
const PhonePeSDKExternalConstants_1 = require("../constants/PhonePeSDKExternalConstants");
const PhonePeSDKWebConstants_1 = require("../constants/PhonePeSDKWebConstants");
const models_1 = require("../modules/payment/models");
const ExternalPaymentModels_1 = require("./../modules/payment/ExternalPaymentModels");
const BleManagerBridgeFactory_1 = require("../modules/bleManager/BleManagerBridgeFactory");
const NativeCameraBridgeFactory_1 = require("../modules/camera/NativeCameraBridgeFactory");
const NativeVideoPlayerBridgeFactory_1 = require("../modules/videoPlayer/NativeVideoPlayerBridgeFactory");
const Base64Client_1 = require("../utils/Base64Client");
var Permission = PhonePeSDKExternalConstants_1.ExternalConstants.Permission;
var BlueToothListenerEvents = PhonePeSDKExternalConstants_1.ExternalConstants.BlueToothListenerEvents;
exports.MessagingHandler = MessagingHandler_1.MessagingHandler;
exports.EventHandler = EventHandler_1.EventHandler;
exports.Constants = PhonePeSDKExternalConstants_1.ExternalConstants;
exports.PaymentModels = ExternalPaymentModels_1.ExternalPaymentModels;
class PhonePe {
    constructor(species, operatingSystem) {
        this.preferencesModule = NativePreferenceBridgeFactory_1.NativePreferenceBridgeFactory.getNativePreferenceBridge(species, operatingSystem);
        this.locationModule = LocationBridgeFactory_1.LocationBridgeFactory.getNativeLocationBridge(species, operatingSystem);
        this.navigationModule = NativeNavigationFactory_1.NativeNavigationFactory.repository(species, operatingSystem);
        this.cameraBridge = NativeCameraBridgeFactory_1.NativeCameraBridgeFactory.getNativeCameraBridge(species);
        this.permissionsBridge = NativePermissionsBridgeFactory_1.NativePermissionsBridgeFactory.getPermissionsBridge(species, operatingSystem);
        this.analyticsBridge = NativeAnalyticsBridgeFactory_1.NativeAnalyticsBridgeFactory.getNativeAnalyticsBridge(species, operatingSystem);
        this.authBridge = NativeOAuthBridgeFactory_1.NativeOAuthBridgeFactory.bridge(species);
        this.deviceInfoBridge = NativeDeviceInfoBridgeFactory_1.NativeDeviceInfoBridgeFactory.bridge(species);
        this.bleManagerBridge = BleManagerBridgeFactory_1.default.getBleManagerBridge(species);
        this.orderActionBridge = NativeOrderActionBridgeFactory_1.NativeOrderActionBridgeFactory.bridge(species);
        this.filePickerBridge = NativeFilePickerBridgeFactory_1.NativeFilePickerBridgeFactory.bridge(species);
        this.orientationBridge = OrientationBridgeFactory_1.OrientationBridgeFactory.getOrientationBridge(species);
        this.videoPlayerBridge = NativeVideoPlayerBridgeFactory_1.NativeVideoPlayerBridgeFactory.getNativeVideoPlayerBridge(species);
        this.species = species;
    }
    static build(species, operatingSystem) {
        return __awaiter(this, void 0, void 0, function* () {
            let finalOperatingSystem = operatingSystem;
            if (!finalOperatingSystem) {
                finalOperatingSystem = this.getOperatingSystem(species);
            }
            if (!finalOperatingSystem) {
                throw new Error(PhonePeSDKInternalConstants_1.InternalConstants.ErrorCode.invalidParams);
            }
            if (!PhonePeUtils_1.PhonePeUtils.isValidSpecies(species) ||
                !PhonePeUtils_1.PhonePeUtils.isValidOS(finalOperatingSystem)) {
                throw new Error(PhonePeSDKInternalConstants_1.InternalConstants.ErrorCode.invalidParams);
            }
            let sdk = new PhonePe(species, finalOperatingSystem);
            if (species === PhonePeSDKExternalConstants_1.ExternalConstants.Species.web) {
                yield MethodVersioningHandler_1.MethodVersioningHandler.initSupportedVersionFromNative();
            }
            return sdk;
        });
    }
    static getOperatingSystem(species) {
        if (species === PhonePeSDKExternalConstants_1.ExternalConstants.Species.web) {
            if (navigator.userAgent.search(PhonePeSDKExternalConstants_1.ExternalConstants.OSUserAgent.android) !== -1) {
                return PhonePeSDKExternalConstants_1.ExternalConstants.OS.android;
            }
            if (navigator.userAgent.search(PhonePeSDKExternalConstants_1.ExternalConstants.OSUserAgent.ios) !== -1) {
                return PhonePeSDKExternalConstants_1.ExternalConstants.OS.ios;
            }
            let existingMethodName = PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.NavigationIOS.navigateToPaymentsView;
            if (PhonePeUtils_1.PhonePeUtils.isValidMethodOniOS(existingMethodName)) {
                return PhonePeSDKExternalConstants_1.ExternalConstants.OS.ios;
            }
            return PhonePeSDKExternalConstants_1.ExternalConstants.OS.android;
        }
        else {
            if (process.env.PHONEPE_BUILD_ENV !== 'web') {
                const { Platform } = require('react-native');
                return Platform.OS;
            }
        }
        return PhonePeSDKExternalConstants_1.ExternalConstants.OS.android;
    }
    getItem(preferenceName, key, defaultValue) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(preferenceName);
            PhonePeUtils_1.PhonePeUtils.assertString(key);
            PhonePeUtils_1.PhonePeUtils.assertString(defaultValue, true);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        return this.preferencesModule.getString(preferenceName, key, defaultValue);
    }
    setItem(preferenceName, key, value) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(preferenceName);
            PhonePeUtils_1.PhonePeUtils.assertString(key);
            PhonePeUtils_1.PhonePeUtils.assertString(value);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        this.preferencesModule.saveString(preferenceName, key, value);
        return PhonePeUtils_1.PhonePeUtils.returnResolution(undefined);
    }
    removeItem(preferenceName, key) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(preferenceName);
            PhonePeUtils_1.PhonePeUtils.assertString(key);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        this.preferencesModule.removeItem(preferenceName, key);
        return PhonePeUtils_1.PhonePeUtils.returnResolution(undefined);
    }
    startUpdatingLocation() {
        this.locationModule.startUpdatingLocation();
    }
    stopUpdatingLocation() {
        this.locationModule.stopUpdatingLocation();
    }
    getCurrentLocation() {
        return this.locationModule.getCurrentLocation(true);
    }
    registerLocationUpdateSuccessCallback(callbackName, callback) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(callbackName);
            PhonePeUtils_1.PhonePeUtils.assertFunction(callback);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        let subscription = this.locationModule.onLocationUpdateSuccess(callbackName, callback);
        return PhonePeUtils_1.PhonePeUtils.returnResolution(subscription);
    }
    registerLocationUpdateFailureCallback(callbackName, callback) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(callbackName);
            PhonePeUtils_1.PhonePeUtils.assertFunction(callback);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        let subscription = this.locationModule.onLocationUpdateFailure(callbackName, callback);
        return PhonePeUtils_1.PhonePeUtils.returnResolution(subscription);
    }
    openPaymentsPage(merchantName, context, fallbackURL, imageURL, orderedMetaData, confirmationActionButtonProperties) {
        return this.makeCommonPaymentsPageCall(PhonePeSDKInternalConstants_1.InternalConstants.General.v1, merchantName, context, fallbackURL, imageURL, orderedMetaData, confirmationActionButtonProperties);
    }
    openTransactionDetailsPage(transactionId) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(transactionId);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        let request = ExternalNavigationFactory_1.ExternalNavigationFactory.transactionDetailRequest(transactionId);
        return this.navigationModule.processNavigationRequestForResultAsync(request);
    }
    seekPermission(listOfPermissions) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertArray(listOfPermissions);
            for (let name of listOfPermissions) {
                PhonePeUtils_1.PhonePeUtils.assertString(name);
                PhonePeUtils_1.PhonePeUtils.assert(Permission[name] !== undefined, PhonePeSDKInternalConstants_1.InternalConstants.ErrorCode.invalidParams);
            }
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        return this.permissionsBridge.seekPermission(listOfPermissions);
    }
    openSettingsPageForPermission() {
        return this.permissionsBridge.openSettingsPageForPermission();
    }
    scanQRCode(showGallery, validatorRegex = '.*') {
        return this.cameraBridge.scanQRCode(showGallery, validatorRegex);
    }
    startCamera() {
        return this.cameraBridge.startCamera();
    }
    loadFont(name, base64FontString, type) {
        if (this.species === PhonePeSDKExternalConstants_1.ExternalConstants.Species.web) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(PhonePeSDKInternalConstants_1.InternalConstants.ErrorCode.invalidParams);
        }
        if (process.env.PHONEPE_BUILD_ENV !== 'web') {
            const { ReactNativeFontBridge } = require('./../modules/font/NativeFontBridge.common');
            return ReactNativeFontBridge.loadFont(name, base64FontString, type);
        }
        throw new Error('Wrong species sent');
    }
    logMerchantEvent(name, metadata) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(name);
            PhonePeUtils_1.PhonePeUtils.assertObject(metadata, true);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        return this.analyticsBridge.logMerchantEvent(name, metadata);
    }
    fetchGrantToken() {
        return this.authBridge.fetchGrantToken();
    }
    fetchPermissionGrantToken(permissions) {
        return this.authBridge.resourceGrant(permissions);
    }
    fetchAuthToken() {
        return this.authBridge.fetchAuthToken();
    }
    createServiceRequestToken() {
        return this.orderActionBridge.createServiceRequestToken();
    }
    getDeviceInfo() {
        return this.deviceInfoBridge.getDeviceInfo();
    }
    bluetoothRead(peripheralId, serviceUUID, characteristicUUID) {
        return this.bleManagerBridge.read(peripheralId, serviceUUID, characteristicUUID);
    }
    bluetoothReadRSSI(peripheralId) {
        return this.bleManagerBridge.readRSSI(peripheralId);
    }
    registerBluetoothOperationSuccessCallback(callbackName, eventName, callback) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(callbackName);
            PhonePeUtils_1.PhonePeUtils.assertFunction(callback);
            PhonePeUtils_1.PhonePeUtils.assert(Boolean(BlueToothListenerEvents[eventName]), PhonePeSDKInternalConstants_1.InternalConstants.ErrorCode.invalidParams);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        let subscription = this.bleManagerBridge.registerBluetoothOperationSuccessCallback(callbackName, eventName, callback);
        return PhonePeUtils_1.PhonePeUtils.returnResolution(subscription);
    }
    bluetoothRefreshCache(peripheralId) {
        return this.bleManagerBridge.refreshCache(peripheralId);
    }
    bluetoothRetrieveServices(peripheralId, services) {
        return this.bleManagerBridge.retrieveServices(peripheralId, services);
    }
    bluetoothWrite(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize = 20) {
        return this.bleManagerBridge.write(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize);
    }
    bluetoothWriteWithoutResponse(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize = 20, queueSleepTime = 10) {
        return this.bleManagerBridge.writeWithoutResponse(peripheralId, serviceUUID, characteristicUUID, data, maxByteSize, queueSleepTime);
    }
    bluetoothConnect(peripheralId) {
        return this.bleManagerBridge.connect(peripheralId);
    }
    bluetoothCreateBond(peripheralId) {
        return this.bleManagerBridge.createBond(peripheralId);
    }
    bluetoothRemoveBond(peripheralId) {
        return this.bleManagerBridge.removeBond(peripheralId);
    }
    bluetoothDisconnect(peripheralId) {
        return this.bleManagerBridge.disconnect(peripheralId);
    }
    bluetoothStartNotification(peripheralId, serviceUUID, characteristicUUID) {
        return this.bleManagerBridge.startNotification(peripheralId, serviceUUID, characteristicUUID);
    }
    bluetoothStopNotification(peripheralId, serviceUUID, characteristicUUID) {
        return this.bleManagerBridge.stopNotification(peripheralId, serviceUUID, characteristicUUID);
    }
    bluetoothCheckState() {
        this.bleManagerBridge.checkState();
    }
    bluetoothStart(options) {
        return this.bleManagerBridge.start(options);
    }
    bluetoothScan(serviceUUIDs, seconds, allowDuplicates = false, scanningOptions = {}) {
        return this.bleManagerBridge.scan(serviceUUIDs, seconds, allowDuplicates, scanningOptions);
    }
    bluetoothStopScan() {
        return this.bleManagerBridge.stopScan();
    }
    bluetoothEnableBluetooth() {
        return this.bleManagerBridge.enableBluetooth();
    }
    bluetoothGetConnectedPeripherals(serviceUUIDs) {
        return this.bleManagerBridge.getConnectedPeripherals(serviceUUIDs);
    }
    bluetoothGetBondedPeripherals() {
        return this.bleManagerBridge.getBondedPeripherals();
    }
    bluetoothGetDiscoveredPeripherals() {
        return this.bleManagerBridge.getDiscoveredPeripherals();
    }
    bluetoothRemovePeripheral(peripheralId) {
        return this.bleManagerBridge.removePeripheral(peripheralId);
    }
    bluetoothIsPeripheralConnected(peripheralId, serviceUUIDs) {
        return this.bleManagerBridge.isPeripheralConnected(peripheralId, serviceUUIDs);
    }
    bluetoothRequestConnectionPriority(peripheralId, connectionPriority) {
        return this.bleManagerBridge.requestConnectionPriority(peripheralId, connectionPriority);
    }
    bluetoothRequestMTU(peripheralId, mtu) {
        return this.bleManagerBridge.requestMTU(peripheralId, mtu);
    }
    reserveOrder(response, providerId) {
        let payload;
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(response);
            PhonePeUtils_1.PhonePeUtils.assertString(providerId);
            payload = JSON.parse(Base64Client_1.Base64Client.decode(response));
            PhonePeUtils_1.PhonePeUtils.assertObject(payload);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        return this.orderActionBridge.reserveOrder(PhonePeUtils_1.PhonePeUtils.getReserveOrderPayload(payload, providerId));
    }
    proceedToPay(reservationId, fallbackURL) {
        try {
            let meta = {};
            if (reservationId) {
                meta = { 'rid': reservationId };
            }
            this.logMerchantEvent('CATEGORY_PAYMENT_INIT', meta);
            PhonePeUtils_1.PhonePeUtils.assertString(reservationId);
            if (PhonePe.getOperatingSystem(this.species) !== PhonePeSDKExternalConstants_1.ExternalConstants.OS.ios) {
                PhonePeUtils_1.PhonePeUtils.assertString(fallbackURL);
            }
        }
        catch (error) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(error);
        }
        let encodedfallbackURL = fallbackURL ? encodeURIComponent(fallbackURL) : '';
        const request = ExternalNavigationFactory_1.ExternalNavigationFactory.genericPaymentNavigationRequest(reservationId, encodedfallbackURL);
        return this.navigationModule.processNavigationRequestForResultAsync(request);
    }
    openPaymentsPageForReservedOrder(merchantName, response, fallbackURL, imageURL, orderedMetaData, confirmationActionButtonProperties) {
        const context = JSON.parse(Base64Client_1.Base64Client.decode(response));
        return this.makeCommonPaymentsPageCall(PhonePeSDKInternalConstants_1.InternalConstants.General.v2, merchantName, context, fallbackURL, imageURL, orderedMetaData, confirmationActionButtonProperties);
    }
    makeCommonPaymentsPageCall(version, merchantName, context, fallbackURL, imageURL, orderedMetaData, confirmationActionButtonProperties) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(merchantName);
            PhonePeUtils_1.PhonePeUtils.assertObject(context);
            if (this.species === PhonePeSDKExternalConstants_1.ExternalConstants.Species.web) {
                PhonePeUtils_1.PhonePeUtils.assertString(fallbackURL, true);
            }
            PhonePeUtils_1.PhonePeUtils.assertString(imageURL, true);
            PhonePeUtils_1.PhonePeUtils.assertArray(orderedMetaData, true);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        let amount = context[models_1.ExternalPaymentsNamespace.Constant.kPayableAmount];
        let meta = {};
        if (amount) {
            meta = { 'amount': amount };
        }
        this.logMerchantEvent('CATEGORY_PAYMENT_INIT', meta);
        let request = ExternalNavigationFactory_1.ExternalNavigationFactory.paymentNavigationRequest(merchantName, context, version, fallbackURL, imageURL, orderedMetaData, confirmationActionButtonProperties);
        return new Promise((resolve, reject) => {
            this.navigationModule.processNavigationRequestForResultAsync(request).then((res) => {
                let response = {};
                let key = models_1.ExternalPaymentsNamespace.Constant.kMerchantTransactionId;
                let merchantTransactionId = context[key];
                if (merchantTransactionId) {
                    response[key] = merchantTransactionId;
                }
                resolve(response);
            }).catch((err) => {
                reject(err);
            });
        });
    }
    selectFile(mimeType, allowMultiple) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(mimeType);
            PhonePeUtils_1.PhonePeUtils.assertBoolean(allowMultiple);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        return this.filePickerBridge.selectFile(mimeType, allowMultiple);
    }
    readFile(uri, offset, length) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(uri);
            PhonePeUtils_1.PhonePeUtils.assertNumber(offset);
            PhonePeUtils_1.PhonePeUtils.assertNumber(length);
            if (offset < 0 || length < 0) {
                throw new TypeError(PhonePeSDKInternalConstants_1.InternalConstants.ErrorCode.invalidParams);
            }
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        return this.filePickerBridge.readFile(uri, offset, length);
    }
    changeOrientation(orientationType) {
        try {
            if (!orientationType) {
                throw new TypeError(PhonePeSDKInternalConstants_1.InternalConstants.ErrorCode.invalidParams);
            }
            PhonePeUtils_1.PhonePeUtils.assertString(orientationType);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        return this.orientationBridge.changeOrientation(orientationType);
    }
    requestFullScreenMode() {
        this.orientationBridge.requestFullScreenMode();
    }
    requestExitFullScreenMode() {
        this.orientationBridge.requestExitFullScreenMode();
    }
    closeApp() {
        let request = new NavigationRequest_1.CloseAppNavRequest('');
        this.navigationModule.closeAppRequest(request);
    }
    openMicroApp(appUniqueId) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(appUniqueId);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        const params = {
            appUniqueId,
            microAppOpenAnalyticsInfo: {
                pageDepth: 'APP_REDIRECT',
                index: 0,
                source: 'UNKNOWN',
                category: 'UNKNOWN',
                serviceabilityStatus: 'UNKNOWN',
                appUniqueId
            }
        };
        return this.navigationModule.navigateToSwitchApp(params);
    }
    navigateToMap(latitude, longitude) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertNumber(latitude);
            PhonePeUtils_1.PhonePeUtils.assertNumber(longitude);
            PhonePeUtils_1.PhonePeUtils.assert(latitude <= 90 && latitude >= -90, 'Latitude should be between -90 to 90');
            PhonePeUtils_1.PhonePeUtils.assert(longitude <= 180 && longitude >= -180, 'Latitude should be between -180 to 180');
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        return this.navigationModule.navigateToMap(latitude, longitude);
    }
    isVideoCallingEnabled() {
        return this.isMethodSupported('videoCall');
    }
    startVideoPlayer(configuration) {
        try {
            PhonePeUtils_1.PhonePeUtils.assertString(configuration);
        }
        catch (err) {
            return PhonePeUtils_1.PhonePeUtils.returnRejection(err);
        }
        return this.videoPlayerBridge.startVideoPlayer(configuration);
    }
    isMethodSupported(methodName) {
        return MethodVersioningHandler_1.MethodVersioningHandler.isMethodSupported(methodName);
    }
}
PhonePe.loggingEnabled = false;
exports.PhonePe = PhonePe;
