"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PhonePeReactSubscription_1 = require("./../../subscription/PhonePeReactSubscription");
const react_native_1 = require("react-native");
const PhonePeSDKWebConstants_1 = require("../../constants/PhonePeSDKWebConstants");
class IOSLocationBridge {
    constructor(bridge) {
        this.locationBridge = bridge;
        this.eventEmitter = new react_native_1.NativeEventEmitter(bridge);
    }
    getAddress(latitude, longitude) {
        return this.locationBridge.getAddress(latitude, longitude);
    }
    startUpdatingLocation() {
        this.locationBridge.startUpdatingLocation();
    }
    stopUpdatingLocation() {
        this.locationBridge.stopUpdatingLocation();
    }
    getCurrentLocation(forceNewLocation = false) {
        return this.locationBridge.getCurrentLocation();
    }
    onLocationUpdateSuccess(callbackName, callback) {
        let eventName = PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.Location.locationSuccessEventKey;
        let emitterSubscription = this.eventEmitter.addListener(eventName, callback);
        let phonepeSubscription = new PhonePeReactSubscription_1.PhonePeReactSubscription(callbackName, eventName, callback, emitterSubscription);
        return phonepeSubscription;
    }
    onLocationUpdateFailure(callbackName, callback) {
        let eventName = PhonePeSDKWebConstants_1.PhonePeSDKWebConstants.Location.locationFailureEventKey;
        let emitterSubscription = this.eventEmitter.addListener(eventName, callback);
        let phonepeSubscription = new PhonePeReactSubscription_1.PhonePeReactSubscription(callbackName, eventName, callback, emitterSubscription);
        return phonepeSubscription;
    }
    isLocationTurnedOn() {
        return this.locationBridge.isLocationEnabled();
    }
    turnOnLocation() {
        return Promise.resolve();
    }
    isAppAuthorisedToUseLocation() {
        return this.locationBridge.isAppAuthorisedToUseLocation();
    }
    openSettings() {
        return this.locationBridge.openLocationSettings();
    }
    setLocationPriority(priority) {
    }
}
exports.IOSLocationBridge = IOSLocationBridge;
