"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../logging/Logger");
const PhonePeUtils_1 = require("./../../utils/PhonePeUtils");
const MessagingHandler_1 = require("../../core/web/MessagingHandler");
const PhonePeSDKInternalConstants_1 = require("./../../constants/PhonePeSDKInternalConstants");
var Const = PhonePeSDKInternalConstants_1.InternalConstants.PermissionsBridge;
class WebPermissionsBridge {
    constructor(operatingSystem) {
        this.operatingSystem = operatingSystem;
    }
    seekPermission(listOfPermissions) {
        let permissions = PhonePeUtils_1.PhonePeUtils.osSpecificPermissionNames(listOfPermissions, this.operatingSystem);
        return new Promise((resolve, reject) => {
            MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.seekPermission, Const.name, { 'permissions': permissions }).then((res) => {
                Logger_1.Logger.logd('PhonePe', 'Unstripped response = ' + JSON.stringify(res));
                if (typeof res === 'string') {
                    let jsonRes = JSON.parse(res);
                    jsonRes.forEach((dict) => {
                        let permissionName = PhonePeUtils_1.PhonePeUtils.strippedPermissionName(dict[Const.kPermission], this.operatingSystem);
                        dict[Const.kPermission] = permissionName;
                    });
                    Logger_1.Logger.logd('PhonePe', 'Stripped response = ' + JSON.stringify(jsonRes));
                    resolve(jsonRes);
                }
                else {
                    reject('Wrong response sent by PhonePe');
                }
            }).catch((err) => {
                reject(err);
            });
        });
    }
    openSettingsPageForPermission() {
        return MessagingHandler_1.MessagingHandler.storePromiseAndCallNative(Const.openSettingsPage, Const.name, {});
    }
}
exports.WebPermissionsBridge = WebPermissionsBridge;
